-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.comment_legacy
(
    id integer NOT NULL DEFAULT nextval('comment_id_seq'::regclass),
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    task_id integer NOT NULL,
    user_id integer NOT NULL,
    comment text COLLATE pg_catalog."default",
    CONSTRAINT comment_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.task
(
    id serial NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    title text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    state text COLLATE pg_catalog."default",
    difficulty text COLLATE pg_catalog."default",
    end_date date,
    user_id integer,
    start_date timestamp without time zone,
    is_active boolean DEFAULT false,
    total_time_spent interval DEFAULT '00:00:00'::interval,
    archived_at timestamp with time zone,
    completed_at timestamp with time zone,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    priority text COLLATE pg_catalog."default",
    estimated_time interval,
    CONSTRAINT task_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id integer NOT NULL DEFAULT nextval('user_id_seq'::regclass),
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    email text COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,
    bio text COLLATE pg_catalog."default",
    skillset text[] COLLATE pg_catalog."default",
    name text COLLATE pg_catalog."default" NOT NULL DEFAULT ''::text,
    role text COLLATE pg_catalog."default" NOT NULL DEFAULT 'user'::text,
    CONSTRAINT user_pkey PRIMARY KEY (id),
    CONSTRAINT user_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.time_track
(
    id serial NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    task_id integer NOT NULL,
    user_id integer NOT NULL,
    start_time timestamp without time zone NOT NULL,
    end_time timestamp without time zone,
    comment text COLLATE pg_catalog."default",
    CONSTRAINT time_track_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.friendship
(
    id serial NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    user_id integer NOT NULL,
    friend_id integer NOT NULL,
    status text COLLATE pg_catalog."default",
    CONSTRAINT friendship_pkey PRIMARY KEY (id),
    CONSTRAINT friendship_user_id_friend_id_key UNIQUE (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS public.task_assignment
(
    id serial NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    task_id integer NOT NULL,
    user_id integer NOT NULL,
    role text COLLATE pg_catalog."default" DEFAULT 'collaborator'::text,
    CONSTRAINT task_assignment_pkey PRIMARY KEY (id),
    CONSTRAINT task_assignment_task_id_user_id_key UNIQUE (task_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.notification
(
    id serial NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    user_id integer NOT NULL,
    notification_type text COLLATE pg_catalog."default",
    message text COLLATE pg_catalog."default",
    task_id integer,
    read boolean DEFAULT false,
    CONSTRAINT notification_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.rating
(
    id serial NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    task_id integer NOT NULL,
    user_id integer NOT NULL,
    rating integer,
    CONSTRAINT rating_pkey PRIMARY KEY (id),
    CONSTRAINT rating_task_id_user_id_key UNIQUE (task_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.profiles
(
    id serial NOT NULL,
    user_id integer NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    bio text COLLATE pg_catalog."default",
    profile_picture_url text COLLATE pg_catalog."default",
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    updated_at timestamp without time zone NOT NULL DEFAULT now(),
    CONSTRAINT profiles_pkey PRIMARY KEY (id),
    CONSTRAINT profiles_email_key UNIQUE (email),
    CONSTRAINT profiles_user_id_key UNIQUE (user_id)
);

CREATE TABLE IF NOT EXISTS public.task_tag
(
    id serial NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    task_id integer NOT NULL,
    tag_id integer NOT NULL,
    CONSTRAINT task_tag_pkey PRIMARY KEY (id),
    CONSTRAINT task_tag_task_id_tag_id_key UNIQUE (task_id, tag_id)
);

CREATE TABLE IF NOT EXISTS public.tag
(
    id serial NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tag_pkey PRIMARY KEY (id),
    CONSTRAINT tag_name_key UNIQUE (name)
);

ALTER TABLE IF EXISTS public.comment_legacy
    ADD CONSTRAINT comment_task_id_fkey FOREIGN KEY (task_id)
    REFERENCES public.task (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_comment_task_id
    ON public.comment_legacy(task_id);


ALTER TABLE IF EXISTS public.comment_legacy
    ADD CONSTRAINT comment_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.task
    ADD CONSTRAINT task_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS idx_task_user_id
    ON public.task(user_id);


ALTER TABLE IF EXISTS public.time_track
    ADD CONSTRAINT time_track_task_id_fkey FOREIGN KEY (task_id)
    REFERENCES public.task (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.time_track
    ADD CONSTRAINT time_track_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.friendship
    ADD CONSTRAINT friendship_friend_id_fkey FOREIGN KEY (friend_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_friendship_friend_id
    ON public.friendship(friend_id);


ALTER TABLE IF EXISTS public.friendship
    ADD CONSTRAINT friendship_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS idx_friendship_user_id
    ON public.friendship(user_id);


ALTER TABLE IF EXISTS public.task_assignment
    ADD CONSTRAINT task_assignment_task_id_fkey FOREIGN KEY (task_id)
    REFERENCES public.task (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.task_assignment
    ADD CONSTRAINT task_assignment_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notification
    ADD CONSTRAINT notification_task_id_fkey FOREIGN KEY (task_id)
    REFERENCES public.task (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.notification
    ADD CONSTRAINT notification_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.rating
    ADD CONSTRAINT rating_task_id_fkey FOREIGN KEY (task_id)
    REFERENCES public.task (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.rating
    ADD CONSTRAINT rating_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.profiles
    ADD CONSTRAINT profiles_user_id_fkey FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS profiles_user_id_key
    ON public.profiles(user_id);


ALTER TABLE IF EXISTS public.task_tag
    ADD CONSTRAINT task_tag_tag_id_fkey FOREIGN KEY (tag_id)
    REFERENCES public.tag (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.task_tag
    ADD CONSTRAINT task_tag_task_id_fkey FOREIGN KEY (task_id)
    REFERENCES public.task (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;