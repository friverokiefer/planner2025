
----- frontend/eslint.config.js -----
import globals from "globals";
import pluginJs from "@eslint/js";
import pluginReact from "eslint-plugin-react";

/** @type {import('eslint').Linter.Config} */
export default [
  { files: ["**/*.{js,mjs,cjs,jsx}"] },
  { files: ["**/*.js"], languageOptions: { sourceType: "commonjs" } },
  { languageOptions: { globals: globals.browser } },
  pluginJs.configs.recommended,
  pluginReact.configs.flat.recommended,
];

----- frontend/public/index.html -----
<!-- frontend/public/index.html -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Planner2025</title>
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

----- frontend/src/App.css -----
/* frontend/src/App.css */

/* Variables CSS para temas */
:root {
  --primary-color: #007bff;
  --secondary-color: #6c757d;
  --success-color: #28a745;
  --danger-color: #dc3545;
  --info-color: #17a2b8;
  --light-color: #f8f9fa;
  --dark-color: #343a40;
  --text-color: #333333;
  --border-color: #ced4da;
}

/* Estilos para el encabezado */
.header {
  background: linear-gradient(135deg, var(--primary-color), var(--dark-color));
  color: #ffffff;
  padding: 20px 40px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.header h1 {
  margin: 0;
  font-size: 2.5rem;
  text-shadow: 2px 2px 3px rgba(0, 0, 0, 0.2);
}

/* Estilos para el selector de tema */
.theme-selector {
  display: flex;
  align-items: center;
  margin-left: 20px;
}

.theme-selector label {
  margin-right: 10px;
  font-weight: bold;
}

.theme-selector select {
  padding: 5px;
  border-radius: 4px;
  border: none;
  outline: none;
}

/* Estilos para la navegación */
.nav-links {
  list-style: none;
  display: flex;
  gap: 30px;
  padding: 0;
  margin: 0;
}

.nav-link {
  color: #ffffff;
  text-decoration: none;
  font-size: 1.2rem;
  transition: color 0.3s ease, transform 0.3s ease;
  display: flex;
  align-items: center;
}

.nav-link:hover {
  color: #f0f0f0;
  transform: translateY(-2px);
}

.nav-link svg {
  margin-right: 8px;
}

/* Estilos para enlaces activos */
.nav-link.active {
  font-weight: bold;
  color: #f0f0f0;
  background-color: var(--primary-color);
  padding: 5px 10px;
  border-radius: 4px;
}

/* Estilos para el botón de Logout */
.logout-button {
  background-color: var(--danger-color);
  color: #ffffff;
  border: none;
  padding: 8px 12px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.3s ease;
}

.logout-button:hover {
  background-color: darken(var(--danger-color), 10%);
  transform: scale(1.05);
}

/* Estilos para el contenedor principal */
.main-container {
  padding: 40px;
  background-color: var(--light-color);
  min-height: 80vh;
}

/* Estilos para el pie de página */
.footer {
  background-color: var(--secondary-color);
  color: #ffffff;
  text-align: center;
  padding: 20px;
  position: relative;
  bottom: 0;
  width: 100%;
}

/* Estilos para el submenu */
.submenu {
  position: relative;
}

.submenu ul {
  display: none;
  position: absolute;
  top: 100%;
  left: 0;
  background: linear-gradient(135deg, var(--primary-color), var(--dark-color));
  padding: 10px;
  border-radius: 4px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  z-index: 1000;
}

.submenu:hover ul {
  display: block;
}

.submenu ul li {
  width: 100%;
}

.submenu ul li a {
  padding: 8px 16px;
  color: #ffffff;
  text-decoration: none;
  font-size: 1.1rem;
  transition: background-color 0.3s ease;
  display: block;
}

.submenu ul li a:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

/* Estilos para la foto de perfil en el header */
.profile-picture-header {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  margin-right: 10px;
  object-fit: cover;
  border: 2px solid #ffffff;
}

/* Estilos para ErrorBoundary */
.error-boundary {
  text-align: center;
  padding: 20px;
  border: 1px solid var(--danger-color);
  border-radius: 8px;
  background-color: #f8d7da;
  color: #721c24;
}

/* Estilos para la pantalla de carga */
.loading-screen {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  font-size: 1.5rem;
  color: #333333;
}

/* Media Queries para Responsividad */
@media (max-width: 768px) {
  .header {
    flex-direction: column;
    align-items: flex-start;
  }

  .nav-links {
    flex-direction: column;
    gap: 15px;
    width: 100%;
  }

  .nav-link {
    width: 100%;
  }

  .theme-selector {
    margin-left: 0;
    margin-top: 10px;
  }

  .profile-picture-header {
    margin-top: 10px;
  }
}

----- frontend/src/index.js -----
// frontend/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client'; // React 18
import App from './App';
import 'bootstrap/dist/css/bootstrap.min.css';
import './App.css'; // Asegúrate de importar los estilos globales

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  //<React.StrictMode>//
    <App />
  //</React.StrictMode>//
);

----- frontend/src/App.js -----
// frontend/src/App.js

import React, { useState, useEffect } from 'react';
import {
  BrowserRouter as Router,
  Routes,
  Route,
  NavLink,
  Navigate,
} from 'react-router-dom';

import TaskPage from './pages/TaskPage/TaskPage';
import ProfilePage from './pages/ProfilePage/ProfilePage';
import ArchivedTasksPage from './pages/ArchivedTasksPage/ArchivedTasksPage';
import TaskMetricsPage from './pages/TaskMetricsPage/TaskMetricsPage';
import FriendsPage from './pages/FriendsPage/FriendsPage';
import HomePage from './pages/HomePage/HomePage';
import LoginPage from './pages/LoginPage/LoginPage';
import RegisterPage from './pages/RegisterPage/RegisterPage';
import AdminPage from './pages/AdminPage/AdminPage';
import ErrorBoundary from './components/ErrorBoundary/ErrorBoundary'; // Componente global para errores
import './App.css';

import {
  FaTasks,
  FaUser,
  FaArchive,
  FaChartPie,
  FaHome,
  FaSignInAlt,
  FaUserPlus,
  FaUserShield,
} from 'react-icons/fa';

import authService from './services/authService';

import useSound from './hooks/useSound'; // Hook personalizado
import clickSoundFile from './assets/sounds/notification-pluck-on-269288.mp3';

function App() {
  const [user, setUser] = useState(undefined); // null o {token, id, role}
  const [theme, setTheme] = useState('default');
  const [profilePicUrl, setProfilePicUrl] = useState(null);
  const [profileName, setProfileName] = useState('');

  // Sonido al hacer clic en el menú
  const playClickSound = useSound(clickSoundFile);

  // Cargar user y sus datos (nombre, foto)
  useEffect(() => {
    const currentUser = authService.getCurrentUser();
    if (!currentUser) {
      setUser(null);
    } else {
      setUser(currentUser);
      fetchProfileData(currentUser.token);
    }
    // eslint-disable-next-line
  }, []);

  // Llamada a /api/profile para obtener name, pic...
  const fetchProfileData = async (token) => {
    try {
      const res = await fetch('/api/profile', {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (res.ok) {
        const data = await res.json();
        setProfileName(data.name || '');
        setProfilePicUrl(data.profile_picture_url || null);
      }
    } catch (err) {
      console.error('Error fetchProfileData:', err);
      setProfilePicUrl(null);
      setProfileName('');
    }
  };

  // Manejo de login
  const handleLogin = (userData) => {
    setUser(userData);
    fetchProfileData(userData.token);
  };

  // Manejo de logout
  const handleLogout = () => {
    authService.logout();
    setUser(null);
    setProfilePicUrl(null);
    setProfileName('');
  };

  if (user === undefined) {
    return <div className="loading-screen">Cargando sesión...</div>;
  }

  return (
    <div className={`app-container theme-${theme}`}>
      <Router>
        <header className="header">
          <h1>
            Planner2025
            {user ? ` — ¡Bienvenido, ${profileName || 'Usuario'}!` : ''}
          </h1>

          {profilePicUrl && (
            <img
              src={profilePicUrl}
              alt="Mi Perfil"
              className="profile-picture-header"
            />
          )}

          <div className="theme-selector">
            <label htmlFor="theme-select">Tema:</label>
            <select
              id="theme-select"
              value={theme}
              onChange={(e) => setTheme(e.target.value)}
            >
              <option value="default">Default</option>
              <option value="dark">Oscuro</option>
              <option value="pink">Rosa</option>
            </select>
          </div>

          <nav>
            <ul className="nav-links">
              <li>
                <NavLink
                  to="/"
                  className={({ isActive }) =>
                    isActive ? 'active nav-link' : 'nav-link'
                  }
                  onClick={playClickSound}
                >
                  <FaHome color="#fff" /> Home
                </NavLink>
              </li>

              {user ? (
                <>
                  <li>
                    <NavLink
                      to="/profile"
                      className={({ isActive }) =>
                        isActive ? 'active nav-link' : 'nav-link'
                      }
                      onClick={playClickSound}
                    >
                      <FaUser color="#fff" /> Perfil
                    </NavLink>
                  </li>
                  <li>
                    <NavLink
                      to="/tasks"
                      className={({ isActive }) =>
                        isActive ? 'active nav-link' : 'nav-link'
                      }
                      onClick={playClickSound}
                    >
                      <FaTasks color="#fff" /> Tareas
                    </NavLink>
                  </li>
                  <li>
                    <NavLink
                      to="/archived-tasks"
                      className={({ isActive }) =>
                        isActive ? 'active nav-link' : 'nav-link'
                      }
                      onClick={playClickSound}
                    >
                      <FaArchive color="#fff" /> Archivadas
                    </NavLink>
                  </li>
                  <li>
                    <NavLink
                      to="/task-metrics"
                      className={({ isActive }) =>
                        isActive ? 'active nav-link' : 'nav-link'
                      }
                      onClick={playClickSound}
                    >
                      <FaChartPie color="#fff" /> Métricas
                    </NavLink>
                  </li>
                  <li>
                    <NavLink
                      to="/friends"
                      className={({ isActive }) =>
                        isActive ? 'active nav-link' : 'nav-link'
                      }
                      onClick={playClickSound}
                    >
                      <FaUser color="#fff" /> Amigos
                    </NavLink>
                  </li>
                  {user.role === 'admin' && (
                    <li>
                      <NavLink
                        to="/admin"
                        className={({ isActive }) =>
                          isActive ? 'active nav-link' : 'nav-link'
                        }
                        onClick={playClickSound}
                      >
                        <FaUserShield color="#fff" /> Admin
                      </NavLink>
                    </li>
                  )}
                  <li>
                    <button
                      onClick={() => {
                        playClickSound();
                        handleLogout();
                      }}
                      className="logout-button"
                    >
                      Logout
                    </button>
                  </li>
                </>
              ) : (
                <>
                  <li>
                    <NavLink
                      to="/login"
                      className={({ isActive }) =>
                        isActive ? 'active nav-link' : 'nav-link'
                      }
                      onClick={playClickSound}
                    >
                      <FaSignInAlt color="#fff" /> Iniciar Sesión
                    </NavLink>
                  </li>
                  <li>
                    <NavLink
                      to="/register"
                      className={({ isActive }) =>
                        isActive ? 'active nav-link' : 'nav-link'
                      }
                      onClick={playClickSound}
                    >
                      <FaUserPlus color="#fff" /> Registrarse
                    </NavLink>
                  </li>
                </>
              )}
            </ul>
          </nav>
        </header>

        <ErrorBoundary>
          <div className="main-container">
            <Routes>
              <Route path="/" element={<HomePage />} />

              <Route
                path="/login"
                element={
                  !user ? <LoginPage onLogin={handleLogin} /> : <Navigate to="/" />
                }
              />
              <Route
                path="/register"
                element={
                  !user ? <RegisterPage onLogin={handleLogin} /> : <Navigate to="/" />
                }
              />

              <Route
                path="/profile"
                element={user ? <ProfilePage /> : <Navigate to="/login" />}
              />
              <Route
                path="/tasks"
                element={user ? <TaskPage /> : <Navigate to="/login" />}
              />
              <Route
                path="/archived-tasks"
                element={user ? <ArchivedTasksPage /> : <Navigate to="/login" />}
              />
              <Route
                path="/task-metrics"
                element={user ? <TaskMetricsPage /> : <Navigate to="/login" />}
              />
              <Route
                path="/friends"
                element={user ? <FriendsPage /> : <Navigate to="/login" />}
              />

              {user && user.role === 'admin' && (
                <Route path="/admin" element={<AdminPage />} />
              )}

              {/* Ruta para manejar páginas no encontradas (404) */}
              <Route path="*" element={<Navigate to="/" />} />
            </Routes>
          </div>
        </ErrorBoundary>

        <footer className="footer">© 2025 Planner2025. Construido con 💜</footer>
      </Router>
    </div>
  );
}

export default App;

----- frontend/src/components/RegisterForm/RegisterForm.js -----
// frontend/src/components/RegisterForm/RegisterForm.js

import React, { useState } from 'react';
import { Form, Button, Alert, Spinner } from 'react-bootstrap';
import './RegisterForm.css';

function RegisterForm({ onRegister }) {
  const [userData, setUserData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleChange = (e) => {
    setUserData({ ...userData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    if (userData.password !== userData.confirmPassword) {
      setError('Las contraseñas no coinciden.');
      setLoading(false);
      return;
    }
    try {
      await onRegister(userData);
    } catch (err) {
      setError(err.response?.data?.msg || 'Error al registrar el usuario.');
      setLoading(false);
    }
  };

  return (
    <Form onSubmit={handleSubmit} className="register-form">
      {error && <Alert variant="danger">{error}</Alert>}
      <Form.Group controlId="registerName">
        <Form.Label>Nombre</Form.Label>
        <Form.Control
          type="text"
          name="name"
          value={userData.name}
          onChange={handleChange}
          placeholder="Ingrese su nombre"
          required
        />
      </Form.Group>

      <Form.Group controlId="registerEmail" className="mt-3">
        <Form.Label>Email</Form.Label>
        <Form.Control
          type="email"
          name="email"
          value={userData.email}
          onChange={handleChange}
          placeholder="Ingrese su email"
          required
        />
      </Form.Group>

      <Form.Group controlId="registerPassword" className="mt-3">
        <Form.Label>Contraseña</Form.Label>
        <Form.Control
          type="password"
          name="password"
          value={userData.password}
          onChange={handleChange}
          placeholder="Ingrese su contraseña"
          required
        />
      </Form.Group>

      <Form.Group controlId="registerConfirmPassword" className="mt-3">
        <Form.Label>Confirmar Contraseña</Form.Label>
        <Form.Control
          type="password"
          name="confirmPassword"
          value={userData.confirmPassword}
          onChange={handleChange}
          placeholder="Confirme su contraseña"
          required
        />
      </Form.Group>

      <Button variant="success" type="submit" className="mt-4" disabled={loading}>
        {loading ? (
          <>
            <Spinner
              as="span"
              animation="border"
              size="sm"
              role="status"
              aria-hidden="true"
            />{' '}
            Registrando...
          </>
        ) : (
          'Registrarse'
        )}
      </Button>
    </Form>
  );
}

export default RegisterForm;

----- frontend/src/components/RegisterForm/RegisterForm.css -----
/* frontend/src/components/RegisterForm/RegisterForm.css */
.register-form {
  width: 100%;
  max-width: 500px;
  margin: 0 auto;
  padding: 20px;
  border: 1px solid #ced4da;
  border-radius: 5px;
}

.register-form .form-group {
  margin-bottom: 15px;
}

.register-form .form-label {
  font-weight: bold;
}

.register-form .btn-success {
  background-color: #28a745;
  border-color: #28a745;
}

.register-form .btn-success:hover {
  background-color: #218838;
  border-color: #1e7e34;
}

----- frontend/src/components/AdminPanel/AdminPanel.js -----

----- frontend/src/components/EditProfileModal/EditProfileModal.css -----
/* frontend/src/components/EditProfileModal/EditProfileModal.css */

.modal-body form {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  
  .modal-body form .form-group label {
    font-weight: bold;
    color: var(--text-color);
  }
  
  .modal-body form .form-control {
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
  }
  
  .modal-footer button {
    min-width: 100px;
  }
  
  @media (max-width: 576px) {
    .modal-content {
      padding: 10px;
    }

    .modal-header,
    .modal-footer {
      padding: 10px;
    }
  }
  
  /* Estilos para el botón de Subir Imagen */
  #formImageUpload .form-control {
    cursor: pointer;
    padding: 10px;
    border: 1px dashed var(--border-color);
    border-radius: 4px;
    transition: background-color 0.3s, border-color 0.3s;
  }

  #formImageUpload .form-control:hover {
    background-color: #f8f9fa;
    border-color: var(--primary-color);
  }

  /* Estilos para la vista previa de la imagen */
  .img-preview {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 50%;
    margin-top: 10px;
    border: 2px solid var(--primary-color);
  }

  /* Estilos para mensajes de error y éxito */
  .success-message {
    color: var(--success-color);
    text-align: center;
    font-weight: bold;
  }

  .error-message {
    color: var(--danger-color);
    text-align: center;
    font-weight: bold;
  }

----- frontend/src/components/EditProfileModal/EditProfileModal.js -----
// frontend/src/components/EditProfileModal/EditProfileModal.js

import React, { useState, useEffect } from 'react';
import { Modal, Button, Form, Alert, Spinner } from 'react-bootstrap';
import './EditProfileModal.css';
import useSound from '../../hooks/useSound';
import editProfileSound from '../../assets/sounds/notification-1-269296.mp3';
import authService from '../../services/authService';

function EditProfileModal({ show, handleClose, profile, handleSave }) {
  const [updatedProfile, setUpdatedProfile] = useState({
    name: '',
    bio: '',
    profile_picture_url: '',
  });
  const [imageFile, setImageFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [uploadError, setUploadError] = useState('');
  const [formError, setFormError] = useState('');
  const [formSuccess, setFormSuccess] = useState('');

  const playEditProfileSound = useSound(editProfileSound);

  // Al abrir el modal, rellena el estado con el perfil actual
  useEffect(() => {
    if (show) {
      setUpdatedProfile({
        name: profile.name || '',
        bio: profile.bio || '',
        profile_picture_url: profile.profile_picture_url || '',
      });
      setImageFile(null);
      setUploadError('');
      setFormError('');
      setFormSuccess('');
    }
  }, [profile, show]);

  // Manejo de campos de texto
  const handleChange = (e) => {
    const { name, value } = e.target;
    setUpdatedProfile((prev) => ({ ...prev, [name]: value }));
  };

  // Manejo de selección de imagen
  const handleImageChange = (e) => {
    if (e.target.files && e.target.files[0]) {
      setImageFile(e.target.files[0]);
      // Muestra un preview local
      setUpdatedProfile((prev) => ({
        ...prev,
        profile_picture_url: URL.createObjectURL(e.target.files[0]),
      }));
    }
  };

  // Sube la imagen al backend => /api/upload/profile-picture
  const uploadImage = async () => {
    if (!imageFile) return null; // no hay archivo
    const formData = new FormData();
    formData.append('profilePicture', imageFile);

    try {
      setUploading(true);
      const response = await fetch('/api/upload/profile-picture', {
        method: 'POST',
        body: formData,
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al subir la imagen');
      }
      const data = await response.json(); // { imageUrl: 'http://localhost:5000/uploads/...' }
      return data.imageUrl;
    } catch (error) {
      console.error('Error al subir la imagen:', error);
      setUploadError(error.message);
      return null;
    } finally {
      setUploading(false);
    }
  };

  // Guardar cambios en el perfil (PUT /api/profile)
  const onSave = async () => {
    setFormError('');
    setFormSuccess('');

    // Validación
    if (!updatedProfile.name.trim()) {
      setFormError('El nombre es obligatorio.');
      return;
    }

    let finalImageUrl = updatedProfile.profile_picture_url;
    // Si subimos un archivo nuevo, primero lo subimos
    if (imageFile) {
      const uploadedUrl = await uploadImage();
      if (!uploadedUrl) {
        // Falló subida => no continuamos
        return;
      }
      finalImageUrl = uploadedUrl; // URL devuelta por el backend
    }

    // Comprobamos token
    const user = authService.getCurrentUser();
    if (!user || !user.token) {
      setFormError('No hay usuario autenticado.');
      return;
    }

    // PUT /api/profile
    try {
      const response = await fetch('/api/profile', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user.token}`,
        },
        body: JSON.stringify({
          name: updatedProfile.name,
          bio: updatedProfile.bio,
          profile_picture_url: finalImageUrl, // Aseguramos enviar la URL final
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        setFormError(errorData.error || 'Error al actualizar el perfil');
        return;
      }

      const data = await response.json(); // Perfil actualizado
      // Llamamos a handleSave para actualizar en ProfilePage
      handleSave(data);
      playEditProfileSound();
      setFormSuccess('Perfil actualizado exitosamente.');

      // Cerrar el modal unos milisegundos después
      setTimeout(() => {
        handleClose();
        setFormSuccess('');
      }, 1500);
    } catch (error) {
      console.error('Error al actualizar el perfil:', error);
      setFormError('Error al actualizar el perfil');
    }
  };

  return (
    <Modal
      show={show}
      onHide={() => {
        handleClose();
        setUploadError('');
        setFormError('');
        setFormSuccess('');
      }}
      centered
    >
      <Modal.Header closeButton>
        <Modal.Title>Editar Perfil</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {formError && <Alert variant="danger">{formError}</Alert>}
        {formSuccess && <Alert variant="success">{formSuccess}</Alert>}
        {uploadError && <Alert variant="danger">{uploadError}</Alert>}

        <Form>
          <Form.Group controlId="formProfileName">
            <Form.Label>Nombre</Form.Label>
            <Form.Control
              type="text"
              name="name"
              value={updatedProfile.name}
              onChange={handleChange}
              placeholder="Ingrese su nombre"
              required
            />
          </Form.Group>

          <Form.Group controlId="formProfileBio" className="mt-3">
            <Form.Label>Biografía</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              name="bio"
              value={updatedProfile.bio}
              onChange={handleChange}
              placeholder="Ingrese una breve biografía"
            />
          </Form.Group>

          <Form.Group controlId="formImageUpload" className="mt-3">
            <Form.Label>Imagen de Perfil</Form.Label>
            <Form.Control
              type="file"
              accept="image/*"
              onChange={handleImageChange}
            />
            {updatedProfile.profile_picture_url && (
              <div className="mt-3">
                {/* Preview local o actual */}
                <img
                  src={updatedProfile.profile_picture_url}
                  alt="Preview"
                  className="img-preview"
                  style={{ width: 100, height: 100, borderRadius: '50%' }}
                />
              </div>
            )}
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Button
          variant="secondary"
          onClick={() => {
            handleClose();
            setUploadError('');
            setFormError('');
            setFormSuccess('');
          }}
        >
          Cancelar
        </Button>
        <Button variant="primary" onClick={onSave} disabled={uploading}>
          {uploading ? (
            <>
              <Spinner
                as="span"
                animation="border"
                size="sm"
                role="status"
                aria-hidden="true"
              />{' '}
              Guardando...
            </>
          ) : (
            'Guardar Cambios'
          )}
        </Button>
      </Modal.Footer>
    </Modal>
  );
}

export default EditProfileModal;

----- frontend/src/components/TaskTable/TaskTable.js -----
// frontend/src/components/TaskTable/TaskTable.js
import React, { useState } from 'react';
import { Table, Form, Button } from 'react-bootstrap';
import authService from '../../services/authService';

function TaskTable({ tasks, onUpdateTask, onDeleteTask }) {
  const [editingTaskId, setEditingTaskId] = useState(null);
  const [localData, setLocalData] = useState({});

  const user = authService.getCurrentUser();

  const handleEditClick = (task) => {
    setEditingTaskId(task.id);
    setLocalData({
      title: task.title,
      priority: task.priority,
      difficulty: task.difficulty,
      state: task.state
    });
  };

  const handleCancel = () => {
    setEditingTaskId(null);
    setLocalData({});
  };

  const handleChange = (e) => {
    setLocalData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  const handleSave = async (task) => {
    const token = user?.token;
    try {
      const response = await fetch(`/api/tasks/${task.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify(localData)
      });
      if (response.ok) {
        const updated = await response.json();
        onUpdateTask(updated);
        setEditingTaskId(null);
        setLocalData({});
      } else {
        console.error('Error al actualizar tarea');
      }
    } catch (error) {
      console.error('Error al actualizar tarea:', error);
    }
  };

  return (
    <Table striped bordered hover>
      <thead>
        <tr>
          <th>Título</th>
          <th>Prioridad</th>
          <th>Dificultad</th>
          <th>Estado</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody>
        {tasks.map((task) => {
          const isEditing = editingTaskId === task.id;
          return (
            <tr key={task.id}>
              <td>
                {isEditing ? (
                  <Form.Control
                    type="text"
                    name="title"
                    value={localData.title}
                    onChange={handleChange}
                  />
                ) : (
                  task.title
                )}
              </td>
              <td>
                {isEditing ? (
                  <Form.Select
                    name="priority"
                    value={localData.priority}
                    onChange={handleChange}
                  >
                    <option value="Low">Baja</option>
                    <option value="Medium">Media</option>
                    <option value="High">Alta</option>
                  </Form.Select>
                ) : (
                  task.priority
                )}
              </td>
              <td>
                {isEditing ? (
                  <Form.Select
                    name="difficulty"
                    value={localData.difficulty}
                    onChange={handleChange}
                  >
                    <option value="1">Fácil</option>
                    <option value="2">Medio</option>
                    <option value="3">Difícil</option>
                  </Form.Select>
                ) : (
                  task.difficulty
                )}
              </td>
              <td>
                {isEditing ? (
                  <Form.Select
                    name="state"
                    value={localData.state}
                    onChange={handleChange}
                  >
                    <option value="Pending">Pendiente</option>
                    <option value="In Progress">En Progreso</option>
                    <option value="Completed">Completado</option>
                    <option value="Archived">Archivada</option>
                  </Form.Select>
                ) : (
                  task.state
                )}
              </td>
              <td>
                {isEditing ? (
                  <>
                    <Button
                      variant="success"
                      size="sm"
                      onClick={() => handleSave(task)}
                    >
                      Guardar
                    </Button>{' '}
                    <Button
                      variant="secondary"
                      size="sm"
                      onClick={handleCancel}
                    >
                      Cancelar
                    </Button>
                  </>
                ) : (
                  <>
                    <Button
                      variant="info"
                      size="sm"
                      onClick={() => handleEditClick(task)}
                    >
                      Editar
                    </Button>{' '}
                    <Button
                      variant="danger"
                      size="sm"
                      onClick={() => onDeleteTask(task.id)}
                    >
                      Eliminar
                    </Button>
                  </>
                )}
              </td>
            </tr>
          );
        })}
      </tbody>
    </Table>
  );
}

export default TaskTable;

----- frontend/src/components/ErrorBoundary/ErrorBoundary.js -----
// frontend/src/components/ErrorBoundary/ErrorBoundary.js
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('ErrorBoundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <h2>Algo salió mal.</h2>;
    }
    return this.props.children; 
  }
}

export default ErrorBoundary;

----- frontend/src/components/TaskForm/TaskForm.js -----
// frontend/src/components/TaskForm/TaskForm.js

import React, { useState } from 'react';
import './TaskForm.css';
import useSound from '../../hooks/useSound';
import addTaskSound from '../../assets/sounds/notification-1-269296.mp3';
import { Form, Button, Alert, Spinner, Row, Col } from 'react-bootstrap';
import {
  FaEdit,
  FaClock,
  FaCheckCircle,
  FaExclamationCircle,
} from 'react-icons/fa';
import authService from '../../services/authService';

function TaskForm({ onTaskAdded }) {
  const [task, setTask] = useState({
    title: '',
    description: '',
    priority: 'Low',
    difficulty: 1,
    status: 'Pending',
    estimated_time: '',
    start_date: '',
    end_date: '',
  });
  const [enableEndDate, setEnableEndDate] = useState(false);
  const [message, setMessage] = useState('');
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);

  const playAddSound = useSound(addTaskSound);

  const handleChange = (e) => {
    const { name, value } = e.target;
    let newValue = value;

    if (name === 'difficulty') {
      newValue = parseInt(value, 10);
    } else if (name === 'estimated_time') {
      newValue = value === '' ? '' : parseFloat(value);
    }
    setTask({ ...task, [name]: newValue });
  };

  const handleToggleEndDate = () => {
    setEnableEndDate((prev) => !prev);
    // Al desactivar el switch, limpiamos el end_date
    if (enableEndDate) {
      setTask((prev) => ({ ...prev, end_date: '' }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setMessage('');

    if (!task.title.trim()) {
      setError('El título de la tarea es obligatorio.');
      setLoading(false);
      return;
    }

    // Validar que la fecha de fin no sea anterior a la fecha de inicio
    if (task.start_date && task.end_date) {
      if (new Date(task.end_date) < new Date(task.start_date)) {
        setError('La fecha de fin no puede ser anterior a la fecha de inicio.');
        setLoading(false);
        return;
      }
    }

    try {
      const user = authService.getCurrentUser();
      if (!user || !user.token) {
        setError('No hay usuario autenticado.');
        setLoading(false);
        return;
      }

      // Si no está habilitada la fecha de fin, la limpiamos antes de enviar
      const finalTaskData = { ...task };
      if (!enableEndDate) {
        finalTaskData.end_date = '';
      }

      const response = await fetch('/api/tasks', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user.token}`,
        },
        body: JSON.stringify(finalTaskData),
      });

      if (response.ok) {
        const newTask = await response.json();
        onTaskAdded(newTask);
        // Resetear formulario y switch
        setTask({
          title: '',
          description: '',
          priority: 'Low',
          difficulty: 1,
          status: 'Pending',
          estimated_time: '',
          start_date: '',
          end_date: '',
        });
        setEnableEndDate(false);
        playAddSound();
        setMessage('Tarea agregada exitosamente.');
      } else {
        const errorData = await response.json();
        if (errorData.error) {
          setError(errorData.error);
        } else if (response.status === 400) {
          setError('Datos inválidos. Revisa los campos.');
        } else {
          setError('Fallo al agregar la tarea.');
        }
      }
    } catch (error) {
      console.error('Error al agregar tarea:', error);
      setError('Ocurrió un error al agregar la tarea.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Form className="task-form" onSubmit={handleSubmit}>
      <h2 className="form-title">
        <FaEdit /> Agregar Nueva Tarea
      </h2>

      {message && <Alert variant="success">{message}</Alert>}
      {error && <Alert variant="danger">{error}</Alert>}

      {/* TÍTULO */}
      <Form.Group>
        <Form.Label>
          <FaEdit /> Título:
        </Form.Label>
        <Form.Control
          type="text"
          name="title"
          value={task.title}
          onChange={handleChange}
          required
          placeholder="Ingrese el título de la tarea"
        />
      </Form.Group>

      {/* DESCRIPCIÓN */}
      <Form.Group>
        <Form.Label>
          <FaEdit /> Descripción:
        </Form.Label>
        <Form.Control
          as="textarea"
          name="description"
          value={task.description}
          onChange={handleChange}
          placeholder="Ingrese la descripción de la tarea"
        />
      </Form.Group>

      {/* PRIORIDAD */}
      <Form.Group>
        <Form.Label>
          <FaExclamationCircle /> Prioridad:
        </Form.Label>
        <Form.Control
          as="select"
          name="priority"
          value={task.priority}
          onChange={handleChange}
          className={`priority-dropdown priority-${task.priority.toLowerCase()}`}
        >
          <option value="Low">Baja</option>
          <option value="Medium">Media</option>
          <option value="High">Alta</option>
        </Form.Control>
      </Form.Group>

      {/* DIFICULTAD */}
      <Form.Group>
        <Form.Label>
          <FaExclamationCircle /> Dificultad:
        </Form.Label>
        <Form.Control
          as="select"
          name="difficulty"
          value={task.difficulty}
          onChange={handleChange}
          className={`difficulty-dropdown difficulty-${task.difficulty}`}
        >
          <option value={1}>1 – Fácil</option>
          <option value={2}>2 – Medio</option>
          <option value={3}>3 – Difícil</option>
        </Form.Control>
      </Form.Group>

      {/* ESTADO */}
      <Form.Group>
        <Form.Label>
          <FaCheckCircle /> Estado:
        </Form.Label>
        <Form.Control
          as="select"
          name="status"
          value={task.status}
          onChange={handleChange}
          className={`status-dropdown status-${task.status
            .toLowerCase()
            .replace(' ', '-')}`}
        >
          <option value="Pending">Pendiente</option>
          <option value="In Progress">En Progreso</option>
          <option value="Completed">Completado</option>
        </Form.Control>
      </Form.Group>

      {/* TIEMPO ESTIMADO */}
      <Form.Group>
        <Form.Label>
          <FaClock /> Tiempo Estimado (horas):
        </Form.Label>
        <Form.Control
          type="number"
          name="estimated_time"
          value={task.estimated_time}
          onChange={handleChange}
          min="0"
          step="0.5"
          placeholder="Horas estimadas"
        />
      </Form.Group>

      {/* FECHAS */}
      <Row className="mt-3">
        <Col md={6}>
          <Form.Group>
            <Form.Label>Fecha de Inicio:</Form.Label>
            <Form.Control
              type="date"
              name="start_date"
              value={task.start_date}
              onChange={handleChange}
              placeholder="dd-mm-yyyy"
            />
          </Form.Group>
        </Col>

        <Col md={6}>
          {/* Switch para activar/desactivar la fecha de fin */}
          <Form.Group>
            <Form.Label>Activar Fecha de Fin:</Form.Label>
            <Form.Check
              type="switch"
              id="enable-end-date-switch"
              label="Sí"
              checked={enableEndDate}
              onChange={handleToggleEndDate}
              className="mb-2"
            />
          </Form.Group>

          {/* Al activar el switch, aparece el campo para la fecha de fin */}
          {enableEndDate && (
            <Form.Group>
              <Form.Label>Fecha de Fin:</Form.Label>
              <Form.Control
                type="date"
                name="end_date"
                value={task.end_date}
                onChange={handleChange}
                placeholder="dd-mm-yyyy"
              />
            </Form.Group>
          )}
        </Col>
      </Row>

      <Button
        type="submit"
        variant="success"
        className="add-task-button mt-3"
        disabled={loading || !task.title}
      >
        {loading ? (
          <>
            <Spinner
              as="span"
              animation="border"
              size="sm"
              role="status"
              aria-hidden="true"
            />{' '}
            Agregando...
          </>
        ) : (
          'Agregar Tarea'
        )}
      </Button>
    </Form>
  );
}

export default TaskForm;

----- frontend/src/components/TaskForm/TaskForm.css -----
/* frontend/src/components/TaskForm.css */

/* Contenedor general del formulario */
.task-form {
  display: flex;
  flex-direction: column;
  gap: 20px;
  padding: 25px;
  border-radius: 10px;
  background-color: #fff; /* Fondo blanco para un mayor contraste */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Título del formulario */
.form-title {
  text-align: center;
  margin-bottom: 20px;
  font-size: 1.8rem;
  color: var(--primary-color);
}

/* Espaciado y disposición de grupos de campos */
.task-form .form-group {
  margin-bottom: 15px;
}

/* Labels con íconos */
.task-form label {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 1rem;
  color: var(--text-color);
  margin-bottom: 5px;
}

.task-form label svg {
  font-size: 1.2rem;
}

/* Campos de texto y selects */
.task-form input,
.task-form textarea,
.task-form select {
  padding: 10px;
  font-size: 1rem;
  border: 1px solid var(--border-color);
  border-radius: 5px;
  transition: border-color 0.3s, box-shadow 0.3s;
}

.task-form input:focus,
.task-form textarea:focus,
.task-form select:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 6px rgba(0, 123, 255, 0.5);
  outline: none;
}

/* Botón de agregar tarea */
.add-task-button {
  width: 100%;
  background: linear-gradient(135deg, var(--success-color), var(--info-color));
  color: white;
  padding: 12px 20px;
  font-size: 1.1rem;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-weight: 600;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition:
    background 0.3s,
    transform 0.2s,
    box-shadow 0.3s;
}

.add-task-button:hover {
  background: linear-gradient(135deg, #218838, #138496);
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

/* Mensajes de éxito y error */
.success {
  color: var(--success-color);
  text-align: center;
  font-weight: bold;
  margin-bottom: 15px;
}

.error {
  color: var(--danger-color);
  text-align: center;
  font-weight: bold;
  margin-bottom: 15px;
}

/* Flecha personalizada para los selects */
.task-form .form-control {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='8'%3E%3Cpath fill='%23333' d='M1.41 0L6 4.58 10.59 0 12 1.41l-6 6-6-6z'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 10px center;
  background-size: 12px 8px;
  padding-right: 30px; /* Espacio para la flecha del select */
}

/* Estilos para selects de prioridad, dificultad y estado */
.task-form .priority-dropdown.priority-low,
.task-form .status-dropdown.status-pending {
  background-color: #007bff; /* Azul */
  color: white;
}

.task-form .priority-dropdown.priority-medium,
.task-form .status-dropdown.status-in-progress {
  background-color: #ffc107; /* Amarillo */
  color: black;
}

.task-form .priority-dropdown.priority-high {
  background-color: #dc3545; /* Rojo */
  color: white;
}

.task-form .difficulty-dropdown.difficulty-1 {
  background-color: #28a745; /* Verde */
  color: white;
}

.task-form .difficulty-dropdown.difficulty-2 {
  background-color: #ffc107; /* Amarillo */
  color: black;
}

.task-form .difficulty-dropdown.difficulty-3 {
  background-color: #dc3545; /* Rojo */
  color: white;
}

.task-form .status-dropdown.status-completed {
  background-color: #28a745; /* Verde */
  color: white;
}

/* Responsividad para pantallas pequeñas */
@media (max-width: 768px) {
  .task-form label {
    flex-direction: column;
    align-items: flex-start;
  }
  .task-form input,
  .task-form textarea,
  .task-form select {
    width: 100%;
  }
}

----- frontend/src/components/EditTaskModal/EditTaskModal.js -----
import React, { useState, useEffect } from 'react';
import { Modal, Button, Form, Alert, Spinner, Row, Col } from 'react-bootstrap';
import './EditTaskModal.css';
import useSound from '../../hooks/useSound';
import editTaskSound from '../../assets/sounds/notification-1-269296.mp3';
import authService from '../../services/authService';

function EditTaskModal({ show, handleClose, task, handleSave }) {
  const [updatedTask, setUpdatedTask] = useState({
    title: '',
    description: '',
    priority: 'Low',
    difficulty: 1,
    status: 'Pending',
    estimated_time: '',
    actual_time: '',
    start_date: '',
    end_date: '',
  });
  const [formError, setFormError] = useState('');
  const [formSuccess, setFormSuccess] = useState('');
  const [loading, setLoading] = useState(false);
  const [enableEndDate, setEnableEndDate] = useState(false);

  const playEditTaskSound = useSound(editTaskSound);

  useEffect(() => {
    if (task && show) {
      setUpdatedTask({
        title: task.title || '',
        description: task.description || '',
        priority: task.priority || 'Low',
        difficulty: task.difficulty || 1,
        status: task.status || 'Pending',
        estimated_time: task.estimated_time || '',
        actual_time: task.actual_time || '',
        start_date: task.start_date
          ? task.start_date.split('T')[0] || task.start_date
          : '',
        end_date: task.end_date
          ? task.end_date.split('T')[0] || task.end_date
          : '',
      });
      setEnableEndDate(!!task.end_date);
      setFormError('');
      setFormSuccess('');
    }
  }, [task, show]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    let newValue = value;

    // Convertir campos numéricos a número
    if (name === 'difficulty') {
      newValue = parseInt(value, 10);
    } else if (name === 'estimated_time' || name === 'actual_time') {
      newValue = value === '' ? '' : parseFloat(value);
    }
    setUpdatedTask((prev) => ({ ...prev, [name]: newValue }));
  };

  const handleToggleEndDate = () => {
    setEnableEndDate((prev) => !prev);
    if (enableEndDate) {
      setUpdatedTask((prev) => ({ ...prev, end_date: '' }));
    }
  };

  const onSave = async () => {
    setFormError('');
    setFormSuccess('');

    if (!updatedTask.title.trim()) {
      setFormError('El título de la tarea es obligatorio.');
      return;
    }

    // Validación de fechas
    if (updatedTask.start_date && updatedTask.end_date) {
      if (new Date(updatedTask.end_date) < new Date(updatedTask.start_date)) {
        setFormError(
          'La fecha de término no puede ser anterior a la fecha de inicio.'
        );
        return;
      }
    }

    setLoading(true);

    try {
      const user = authService.getCurrentUser();
      if (!user || !user.token) {
        setFormError('No hay usuario autenticado.');
        setLoading(false);
        return;
      }

      // Enviar PUT con updatedTask
      const response = await fetch(`/api/tasks/${task.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user.token}`,
        },
        body: JSON.stringify(updatedTask),
      });

      if (!response.ok) {
        const errorData = await response.json();
        setFormError(errorData.error || 'Error al actualizar la tarea');
      } else {
        const data = await response.json();
        // Notificar al padre
        handleSave(data);
        playEditTaskSound();
        setFormSuccess('Tarea actualizada exitosamente.');
        // Cerrar tras un breve delay
        setTimeout(() => {
          handleClose();
          setFormSuccess('');
        }, 1500);
      }
    } catch (error) {
      console.error('Error al actualizar la tarea:', error);
      setFormError('Error al actualizar la tarea');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Modal
      show={show}
      onHide={() => {
        handleClose();
        setFormError('');
        setFormSuccess('');
      }}
      centered
    >
      <Modal.Header closeButton>
        <Modal.Title>Editar Tarea</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        {formError && <Alert variant="danger">{formError}</Alert>}
        {formSuccess && <Alert variant="success">{formSuccess}</Alert>}

        <Form>
          <Row>
            <Col md={6}>
              <Form.Group controlId="formTaskTitle">
                <Form.Label>Título</Form.Label>
                <Form.Control
                  type="text"
                  name="title"
                  value={updatedTask.title}
                  onChange={handleChange}
                  placeholder="Título de la tarea"
                  required
                />
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group controlId="formTaskPriority">
                <Form.Label>Prioridad</Form.Label>
                <Form.Control
                  as="select"
                  name="priority"
                  value={updatedTask.priority}
                  onChange={handleChange}
                >
                  {/* Los values siguen en inglés, para no romper la BD */}
                  <option value="Low">Baja</option>
                  <option value="Medium">Media</option>
                  <option value="High">Alta</option>
                </Form.Control>
              </Form.Group>
            </Col>
          </Row>

          <Row className="mt-3">
            <Col md={6}>
              <Form.Group controlId="formTaskDifficulty">
                <Form.Label>Dificultad</Form.Label>
                <Form.Control
                  as="select"
                  name="difficulty"
                  value={updatedTask.difficulty}
                  onChange={handleChange}
                >
                  <option value={1}>1 - Fácil</option>
                  <option value={2}>2 - Medio</option>
                  <option value={3}>3 - Difícil</option>
                </Form.Control>
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group controlId="formTaskStatus">
                <Form.Label>Estado</Form.Label>
                <Form.Control
                  as="select"
                  name="status"
                  value={updatedTask.status}
                  onChange={handleChange}
                >
                  <option value="Pending">Pendiente</option>
                  <option value="In Progress">En Progreso</option>
                  <option value="Completed">Completado</option>
                  <option value="Archived">Archivada</option>
                </Form.Control>
              </Form.Group>
            </Col>
          </Row>

          <Row className="mt-3">
            <Col md={6}>
              <Form.Group controlId="formTaskEstimatedTime">
                <Form.Label>Tiempo Estimado (horas)</Form.Label>
                <Form.Control
                  type="number"
                  name="estimated_time"
                  value={updatedTask.estimated_time}
                  onChange={handleChange}
                  placeholder="Tiempo estimado"
                  min="0"
                  step="0.1"
                />
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group controlId="formTaskActualTime">
                <Form.Label>Tiempo Real (horas)</Form.Label>
                <Form.Control
                  type="number"
                  name="actual_time"
                  value={updatedTask.actual_time}
                  onChange={handleChange}
                  placeholder="Tiempo real"
                  min="0"
                  step="0.1"
                  readOnly
                />
              </Form.Group>
            </Col>
          </Row>

          <Row className="mt-3 align-items-center">
            <Col md={6}>
              <Form.Group controlId="formTaskStartDate">
                <Form.Label>Fecha de Inicio</Form.Label>
                <Form.Control
                  type="date"
                  name="start_date"
                  value={updatedTask.start_date}
                  onChange={handleChange}
                />
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group controlId="formTaskEndDate">
                <Form.Label>Fecha de Término</Form.Label>
                <Form.Check
                  type="switch"
                  id="enable-end-date-switch"
                  label="Activar Fecha de Término"
                  checked={enableEndDate}
                  onChange={handleToggleEndDate}
                />
                <Form.Control
                  type="date"
                  name="end_date"
                  value={updatedTask.end_date}
                  onChange={handleChange}
                  disabled={!enableEndDate}
                />
              </Form.Group>
            </Col>
          </Row>

          <Form.Group controlId="formTaskDescription" className="mt-3">
            <Form.Label>Descripción</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              name="description"
              value={updatedTask.description}
              onChange={handleChange}
              placeholder="Descripción opcional"
            />
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Button
          variant="secondary"
          onClick={() => {
            handleClose();
            setFormError('');
            setFormSuccess('');
          }}
          disabled={loading}
        >
          Cancelar
        </Button>
        <Button variant="primary" onClick={onSave} disabled={loading}>
          {loading ? (
            <>
              <Spinner
                as="span"
                animation="border"
                size="sm"
                role="status"
                aria-hidden="true"
              />{' '}
              Guardando...
            </>
          ) : (
            'Guardar Cambios'
          )}
        </Button>
      </Modal.Footer>
    </Modal>
  );
}

export default EditTaskModal;

----- frontend/src/components/EditTaskModal/EditTaskModal.css -----
/* frontend/src/components/EditTaskModal/EditTaskModal.css */

.modal-body form {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.modal-body form .form-group label {
  font-weight: bold;
  color: var(--text-color);
}

.modal-body form .form-control {
  padding: 10px;
  border: 1px solid var(--secondary-gray);
  border-radius: 4px;
}

.modal-footer button {
  min-width: 100px;
}

@media (max-width: 576px) {
  .modal-content {
    padding: 10px;
  }

  .modal-header,
  .modal-footer {
    padding: 10px;
  }
}

/* Estilos para los botones del modal */
.btn-secondary {
  background-color: var(--secondary-gray);
  border: none;
  color: white;
  transition: background-color 0.3s;
}

.btn-secondary:hover {
  background-color: #5a6268;
}

.btn-primary {
  background-color: var(--primary-blue);
  border: none;
  color: white;
  transition: background-color 0.3s;
}

.btn-primary:hover {
  background-color: #0056b3;
}

/* Si usaras una vista previa de imagen (no aplica aquí, pero se deja) */
.img-preview {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 50%;
  margin-top: 10px;
  border: 2px solid var(--primary-blue);
}

----- frontend/src/components/Timer/Timer.js -----
// frontend/src/components/Timer/Timer.js
import React, { useState, useEffect } from 'react';
import { Button } from 'react-bootstrap';
import './Timer.css';

function Timer({ onStop }) {
  const [seconds, setSeconds] = useState(0);
  const [active, setActive] = useState(true);

  useEffect(() => {
    let interval = null;
    if (active) {
      interval = setInterval(() => {
        setSeconds((sec) => sec + 1);
      }, 1000);
    } else if (!active && seconds !== 0) {
      clearInterval(interval);
      if (onStop) onStop(seconds / 3600); // Convertir a horas (decimales)
    }
    return () => clearInterval(interval);
  }, [active, seconds, onStop]);

  const handleStop = () => {
    setActive(false);
  };

  return (
    <div className="timer">
      <h5>Temporizador: {formatTime(seconds)}</h5>
      <Button variant="danger" onClick={handleStop}>
        Detener Temporizador
      </Button>
    </div>
  );
}

const formatTime = (totalSeconds) => {
  const hours = Math.floor(totalSeconds / 3600);
  const minutes = Math.floor((totalSeconds % 3600) / 60);
  const seconds = totalSeconds % 60;
  return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
};

const pad = (num) => String(num).padStart(2, '0');

export default Timer;

----- frontend/src/components/Timer/Timer.css -----
/* frontend/src/components/Timer/Timer.css */

.timer-container {
    margin-top: 10px;
    display: flex;
    align-items: center;
    gap: 10px;
}

.timer-container p {
    font-size: 1rem;
    color: var(--text-color);
    margin: 0;
}

----- frontend/src/components/LoginForm/LoginForm.css -----
/* frontend/src/components/LoginForm/LoginForm.css */

.login-form {
  width: 100%;
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;
  border: 1px solid #ced4da;
  border-radius: 5px;
}

.login-form .form-group {
  margin-bottom: 15px;
}

.login-form .form-label {
  font-weight: bold;
}

.login-form .btn-primary {
  background-color: #007bff;
  border-color: #007bff;
}

.login-form .btn-primary:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

----- frontend/src/components/LoginForm/LoginForm.js -----
// frontend/src/components/LoginForm/LoginForm.js

import React, { useState } from 'react';
import { Form, Button, Alert, Spinner } from 'react-bootstrap';
import './LoginForm.css';

function LoginForm({ onLogin }) {
  const [credentials, setCredentials] = useState({ email: '', password: '' });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleChange = (e) => {
    setCredentials({ ...credentials, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    try {
      await onLogin(credentials);
    } catch (err) {
      if (err.response && err.response.data && err.response.data.msg) {
        setError(err.response.data.msg);
      } else {
        setError('Credenciales inválidas.');
      }
      setLoading(false);
    }
  };

  return (
    <Form onSubmit={handleSubmit} className="login-form">
      {error && <Alert variant="danger">{error}</Alert>}
      <Form.Group controlId="loginEmail">
        <Form.Label>Email</Form.Label>
        <Form.Control
          type="email"
          name="email"
          value={credentials.email}
          onChange={handleChange}
          placeholder="Ingrese su email"
          required
        />
      </Form.Group>

      <Form.Group controlId="loginPassword" className="mt-3">
        <Form.Label>Contraseña</Form.Label>
        <Form.Control
          type="password"
          name="password"
          value={credentials.password}
          onChange={handleChange}
          placeholder="Ingrese su contraseña"
          required
        />
      </Form.Group>

      <Button variant="primary" type="submit" className="mt-4" disabled={loading}>
        {loading ? (
          <>
            <Spinner
              as="span"
              animation="border"
              size="sm"
              role="status"
              aria-hidden="true"
            />{' '}
            Cargando...
          </>
        ) : (
          'Iniciar Sesión'
        )}
      </Button>
    </Form>
  );
}

export default LoginForm;

----- frontend/src/components/TaskItem/TaskItem.js -----
// frontend/src/components/TaskItem/TaskItem.js

import React, { useState } from 'react';
import './TaskItem.css';
import {
  FaTrashAlt,
  FaCheck,
  FaEdit,
  FaArchive,
  FaUndo,
  FaEllipsisV,
  FaPlay,
  FaStop,
} from 'react-icons/fa';
import { Dropdown, Button, Alert, ProgressBar } from 'react-bootstrap';
import EditTaskModal from '../EditTaskModal/EditTaskModal';
import ConfirmModal from '../ConfirmModal/ConfirmModal';
import Timer from '../Timer/Timer';
import useSound from '../../hooks/useSound';

// Sonidos
import completeSound from '../../assets/sounds/notification-1-269296.mp3';
import deleteSound from '../../assets/sounds/notification-2-269292.mp3';
import editSound from '../../assets/sounds/notification-sound-3-262896.mp3';
import archiveSound from '../../assets/sounds/intro-sound-2-269294.mp3';

import authService from '../../services/authService';

/**
 * Notas importantes:
 * - El backend guarda "state" para el estado de la tarea, en tu front lo llamas "status".
 * - "estimated_time" y "actual_time" se manejan como horas numéricas (o strings parseables).
 * - Para que la edición funcione (PUT /api/tasks/:id),
 *   tu backend debe permitir actualizar los campos que mandas (priority, difficulty, state, etc.).
 * - El mini gráfico de barra (ProgressBar) usará estimated_time y actual_time para calcular porcentaje.
 */

function TaskItem({
  task,          // objeto con { id, title, description, state, priority, difficulty, estimated_time, actual_time, ...}
  onComplete,
  onDelete,
  onEdit,
  onArchive,
  onUnarchive,
}) {
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [actionError, setActionError] = useState('');
  const [timerActive, setTimerActive] = useState(false);

  // Si la tarea trae actual_time (num) lo asignamos, si no, 0
  const [timeWorked, setTimeWorked] = useState(parseFloat(task.actual_time) || 0);

  // Sonidos
  const playCompleteSound = useSound(completeSound);
  const playDeleteSound = useSound(deleteSound);
  const playEditSound = useSound(editSound);
  const playArchiveSound = useSound(archiveSound);

  // Si no hay ID, no renderizamos
  if (!task || typeof task.id === 'undefined') {
    console.error('TaskItem: "task.id" undefined:', task);
    return null;
  }

  // "state" => status en el front
  const status = task.state || 'Pending';
  const difficulty = parseInt(task.difficulty || '1', 10); // "1","2","3"
  const priority = task.priority || 'Low';
  const user = authService.getCurrentUser();
  const token = user?.token;

  // ~~~~~~~~~~~~~~~~~~~~~~
  // 1) Helpers de Etiquetas
  // ~~~~~~~~~~~~~~~~~~~~~~
  const getStatusLabel = (st) => {
    switch (st) {
      case 'Pending':
        return 'Pendiente';
      case 'In Progress':
        return 'En Progreso';
      case 'Completed':
        return 'Completado';
      case 'Archived':
        return 'Archivada';
      default:
        return st || 'Pendiente';
    }
  };
  const getDifficultyLabel = (diff) => {
    switch (diff) {
      case 1:
        return 'Fácil';
      case 2:
        return 'Medio';
      case 3:
        return 'Difícil';
      default:
        return String(diff);
    }
  };
  const getPriorityLabel = (p) => {
    switch ((p || '').toLowerCase()) {
      case 'low':
        return 'Baja';
      case 'medium':
        return 'Media';
      case 'high':
        return 'Alta';
      default:
        return p || 'Baja';
    }
  };

  // ~~~~~~~~~~~~~~~~~~~~~~
  // 2) Helpers de Colores (están en tu code original)
  // ~~~~~~~~~~~~~~~~~~~~~~
  const getStatusColor = (st) => {
    switch (st) {
      case 'Pending':
        return '#007bff'; // Azul
      case 'In Progress':
        return '#ffc107'; // Amarillo
      case 'Completed':
        return '#28a745'; // Verde
      case 'Archived':
        return '#6c757d'; // Gris
      default:
        return '#17a2b8';
    }
  };
  const getDifficultyColor = (diff) => {
    switch (diff) {
      case 1:
        return '#28a745'; // Verde
      case 2:
        return '#ffc107'; // Amarillo
      case 3:
        return '#dc3545'; // Rojo
      default:
        return '#6c757d';
    }
  };
  const getPriorityColor = (prio) => {
    switch ((prio || '').toLowerCase()) {
      case 'low':
        return '#007bff'; // Azul
      case 'medium':
        return '#ffc107'; // Amarillo
      case 'high':
        return '#dc3545'; // Rojo
      default:
        return '#6c757d';
    }
  };

  // ~~~~~~~~~~~~~~~~~~~~~~
  // 3) Manejo de Edición (PUT /:id)
  // ~~~~~~~~~~~~~~~~~~~~~~
  const handleEditSave = async (updatedTaskData) => {
    setActionError('');
    try {
      const response = await fetch(`/api/tasks/${task.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(updatedTaskData),
      });
      if (response.ok) {
        const updatedTask = await response.json();
        onEdit && onEdit(updatedTask);
        playEditSound();
        setShowEditModal(false);
      } else {
        const errorData = await response.json();
        setActionError(errorData.error || 'Error al editar la tarea');
      }
    } catch (error) {
      console.error('Error al editar la tarea:', error);
      setActionError('Error al editar la tarea');
    }
  };

  // ~~~~~~~~~~~~~~~~~~~~~~
  // 4) Manejo de Borrado
  // ~~~~~~~~~~~~~~~~~~~~~~
  const handleDelete = () => setShowDeleteConfirm(true);
  const confirmDelete = async () => {
    setActionError('');
    try {
      const response = await fetch(`/api/tasks/${task.id}`, {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        onDelete && onDelete(task.id);
        playDeleteSound();
        setShowDeleteConfirm(false);
      } else {
        const errorData = await response.json();
        setActionError(errorData.error || 'Error al eliminar la tarea');
      }
    } catch (error) {
      console.error('Error al eliminar la tarea:', error);
      setActionError('Error al eliminar la tarea');
    }
  };

  // ~~~~~~~~~~~~~~~~~~~~~~
  // 5) Manejo de Completar
  // ~~~~~~~~~~~~~~~~~~~~~~
  const handleComplete = async () => {
    setActionError('');
    try {
      const response = await fetch(`/api/tasks/${task.id}/complete`, {
        method: 'PUT',
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const updatedTask = await response.json();
        onComplete && onComplete(updatedTask);
        playCompleteSound();
      } else {
        const errorData = await response.json();
        setActionError(errorData.error || 'Error al completar la tarea');
      }
    } catch (error) {
      console.error('Error al completar la tarea:', error);
      setActionError('Error al completar la tarea');
    }
  };

  // ~~~~~~~~~~~~~~~~~~~~~~
  // 6) Manejo de Archivar/Desarchivar
  // ~~~~~~~~~~~~~~~~~~~~~~
  const handleArchive = async () => {
    setActionError('');
    try {
      const response = await fetch(`/api/tasks/${task.id}/archive`, {
        method: 'PUT',
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const updatedTask = await response.json();
        onArchive && onArchive(updatedTask);
        playArchiveSound();
      } else {
        const errorData = await response.json();
        setActionError(errorData.error || 'Error al archivar la tarea');
      }
    } catch (error) {
      console.error('Error al archivar la tarea:', error);
      setActionError('Error al archivar la tarea');
    }
  };
  const handleUnarchive = async () => {
    setActionError('');
    try {
      const response = await fetch(`/api/tasks/${task.id}/unarchive`, {
        method: 'PUT',
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.ok) {
        const updatedTask = await response.json();
        onUnarchive && onUnarchive(updatedTask);
        playArchiveSound();
      } else {
        const errorData = await response.json();
        setActionError(errorData.error || 'Error al desarchivar la tarea');
      }
    } catch (error) {
      console.error('Error al desarchivar la tarea:', error);
      setActionError('Error al desarchivar la tarea');
    }
  };

  // ~~~~~~~~~~~~~~~~~~~~~~
  // 7) Manejo de Timer + Tiempo
  // ~~~~~~~~~~~~~~~~~~~~~~
  const handleStartTimer = () => {
    setTimerActive(true);
  };
  const handleStopTimer = async (timeSpentHrs) => {
    setTimerActive(false);
    setActionError('');

    // Actualiza la variable local
    setTimeWorked((prev) => prev + timeSpentHrs);

    // Llamamos a /api/tasks/:id/add-time con { duration }
    try {
      // Pedimos un comentario en un prompt, si deseas
      const userComment = window.prompt('Agrega un comentario (opcional):', '') || '';
      const response = await fetch(`/api/tasks/${task.id}/add-time`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ duration: timeSpentHrs, comment: userComment }),
      });
      if (response.ok) {
        const updatedTask = await response.json();
        // Notificamos al padre => forzar refresco
        if (onEdit) {
          onEdit({
            ...task,
            actual_time: (parseFloat(task.actual_time) || 0) + timeSpentHrs
          });
        }
      } else {
        const errorData = await response.json();
        setActionError(errorData.error || 'Error al agregar tiempo trabajado');
      }
    } catch (error) {
      console.error('Error al agregar tiempo trabajado:', error);
      setActionError('Error al agregar tiempo trabajado');
    }
  };

  // ~~~~~~~~~~~~~~~~~~~~~~
  // 8) Cálculo para la barra de porcentaje
  // ~~~~~~~~~~~~~~~~~~~~~~
  // assumed "task.estimated_time" y "task.actual_time" sean horas numéricas
  const estimatedHours = parseFloat(task.estimated_time) || 0;
  // timeWorked local es la sumatoria local, preferentemente
  const actualHours = timeWorked;
  const usedPercent = estimatedHours > 0 ? Math.min((actualHours / estimatedHours) * 100, 100) : 0;

  // Render principal
  return (
    <>
      <div
        className={`task-item ${
          status === 'Completed' ? 'completed' : ''
        } ${status === 'Archived' ? 'archived' : ''}`}
      >
        {/* -- Menú Superior (3 puntos) -- */}
        <div className="dropdown-top-right">
          <Dropdown>
            <Dropdown.Toggle variant="secondary" id={`dropdown-${task.id}`}>
              <FaEllipsisV />
            </Dropdown.Toggle>
            <Dropdown.Menu>
              {status !== 'Archived' && (
                <>
                  <Dropdown.Item onClick={() => setShowEditModal(true)}>
                    <FaEdit /> Editar
                  </Dropdown.Item>

                  {status !== 'Completed' && (
                    <Dropdown.Item
                      onClick={handleComplete}
                      className="complete-dropdown-item"
                    >
                      <FaCheck /> Completar
                    </Dropdown.Item>
                  )}
                  {status === 'Completed' && (
                    <Dropdown.Item
                      onClick={handleUnarchive}
                      className="continue-dropdown-item"
                    >
                      <FaUndo /> Continuar
                    </Dropdown.Item>
                  )}
                  <Dropdown.Item
                    onClick={handleArchive}
                    className="archive-dropdown-item"
                  >
                    <FaArchive /> Archivar
                  </Dropdown.Item>
                </>
              )}
              {status === 'Archived' && (
                <Dropdown.Item
                  onClick={handleUnarchive}
                  className="unarchive-dropdown-item"
                >
                  <FaUndo /> Desarchivar
                </Dropdown.Item>
              )}
              <Dropdown.Divider />
              <Dropdown.Item
                onClick={handleDelete}
                className="delete-dropdown-item"
              >
                <FaTrashAlt /> Eliminar
              </Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>
        </div>

        {/* -- Info Principal -- */}
        <h3>{task.title}</h3>
        <p>{task.description}</p>

        {/* -- Dropdowns Inline (opcional) => Status, Difficulty, Priority -- */}
        {status !== 'Archived' && (
          <div className="status-difficulty">
            {/* STATUS */}
            <Dropdown className="status-dropdown">
              <Dropdown.Toggle
                variant="light"
                className="status-toggle"
                style={{
                  backgroundColor: getStatusColor(status),
                  color: '#fff',
                }}
              >
                {getStatusLabel(status)}
              </Dropdown.Toggle>
              <Dropdown.Menu>
                <Dropdown.Item
                  onClick={() => handleEditSave({ state: 'Pending' })}
                  className="status-pending"
                >
                  Pendiente
                </Dropdown.Item>
                <Dropdown.Item
                  onClick={() => handleEditSave({ state: 'In Progress' })}
                  className="status-in-progress"
                >
                  En Progreso
                </Dropdown.Item>
                <Dropdown.Item
                  onClick={() => handleEditSave({ state: 'Completed' })}
                  className="status-completed"
                >
                  Completado
                </Dropdown.Item>
              </Dropdown.Menu>
            </Dropdown>

            {/* DIFICULTY */}
            <Dropdown className="difficulty-dropdown">
              <Dropdown.Toggle
                variant="light"
                className="difficulty-toggle"
                style={{
                  backgroundColor: getDifficultyColor(difficulty),
                  color: '#fff',
                }}
              >
                {getDifficultyLabel(difficulty)}
              </Dropdown.Toggle>
              <Dropdown.Menu>
                <Dropdown.Item
                  onClick={() => handleEditSave({ difficulty: '1' })}
                  className="difficulty-1"
                >
                  1 - Fácil
                </Dropdown.Item>
                <Dropdown.Item
                  onClick={() => handleEditSave({ difficulty: '2' })}
                  className="difficulty-2"
                >
                  2 - Medio
                </Dropdown.Item>
                <Dropdown.Item
                  onClick={() => handleEditSave({ difficulty: '3' })}
                  className="difficulty-3"
                >
                  3 - Difícil
                </Dropdown.Item>
              </Dropdown.Menu>
            </Dropdown>

            {/* PRIORITY */}
            <Dropdown className="priority-dropdown">
              <Dropdown.Toggle
                variant="light"
                className="priority-toggle"
                style={{
                  backgroundColor: getPriorityColor(priority),
                  color: '#fff',
                }}
              >
                {getPriorityLabel(priority)}
              </Dropdown.Toggle>
              <Dropdown.Menu>
                <Dropdown.Item
                  onClick={() => handleEditSave({ priority: 'Low' })}
                >
                  Baja
                </Dropdown.Item>
                <Dropdown.Item
                  onClick={() => handleEditSave({ priority: 'Medium' })}
                >
                  Media
                </Dropdown.Item>
                <Dropdown.Item
                  onClick={() => handleEditSave({ priority: 'High' })}
                >
                  Alta
                </Dropdown.Item>
              </Dropdown.Menu>
            </Dropdown>
          </div>
        )}

        {/* -- Fechas y Tiempos -- */}
        <p>Fecha de Creación: {new Date(task.created_at).toLocaleString()}</p>
        {estimatedHours > 0 && (
          <p>Tiempo Estimado: {estimatedHours.toFixed(2)} horas</p>
        )}
        <p>Tiempo Real: {actualHours.toFixed(2)} horas</p>

        {/* -- Mini Barra de Progreso -- */}
        {estimatedHours > 0 && (
          <div style={{ marginBottom: '0.5rem' }}>
            <ProgressBar
              now={usedPercent}
              label={`${usedPercent.toFixed(1)}%`}
              striped
              animated
              style={{ height: '20px' }}
            />
          </div>
        )}

        {/* -- Botón "Completar" si no está completada ni archivada -- */}
        {status !== 'Archived' && status !== 'Completed' && (
          <Button
            variant="success"
            className="complete-button"
            onClick={handleComplete}
          >
            <FaCheck /> Completar
          </Button>
        )}
        {/* -- Botón "Desarchivar" si está archivada -- */}
        {status === 'Archived' && (
          <Button
            variant="info"
            className="unarchive-button"
            onClick={handleUnarchive}
          >
            <FaUndo /> Desarchivar
          </Button>
        )}

        {/* -- Temporizador -- */}
        {status !== 'Archived' && (
          <div className="timer-button">
            {timerActive ? (
              <Button variant="warning" onClick={() => setTimerActive(false)}>
                <FaStop /> Detener Temporizador
              </Button>
            ) : (
              <Button variant="primary" onClick={handleStartTimer}>
                <FaPlay /> Iniciar Temporizador
              </Button>
            )}
          </div>
        )}

        {/* -- Errores de Acción -- */}
        {actionError && <Alert variant="danger">{actionError}</Alert>}

        {/* -- Temporizador Visible -- */}
        {timerActive && <Timer onStop={handleStopTimer} />}
      </div>

      {/* -- Modal de edición manual (campos) -- */}
      <EditTaskModal
        show={showEditModal}
        handleClose={() => setShowEditModal(false)}
        task={{
          ...task,
          status,
          difficulty,
          priority,
        }}
        handleSave={handleEditSave}
      />

      {/* -- Modal de confirmación de borrado -- */}
      <ConfirmModal
        show={showDeleteConfirm}
        handleClose={() => setShowDeleteConfirm(false)}
        handleConfirm={confirmDelete}
        title="Confirmar Eliminación"
        body="¿Estás seguro de que deseas eliminar esta tarea? Esta acción no se puede deshacer."
      />
    </>
  );
}

export default TaskItem;

----- frontend/src/components/TaskItem/TaskItem.css -----
/* frontend/src/components/TaskItem/TaskItem.css */

.task-item {
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 10px;
  background-color: var(--neutral-white);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s, box-shadow 0.2s, background-color 0.3s;
  position: relative;
  margin-bottom: 20px;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.task-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
}

/* Si la tarea está completada => verde claro */
.task-item.completed {
  background-color: var(--accent-light-green);
  border-color: var(--primary-green);
}

/* Si la tarea está archivada => gris */
.task-item.archived {
  background-color: var(--secondary-light-gray);
  border-color: var(--secondary-dark-gray);
}

.dropdown-top-right {
  position: absolute;
  top: 10px;
  right: 10px;
}

.status-difficulty {
  display: flex;
  gap: 10px;
  margin-bottom: 10px;
}

/* Botones dropdown */
.status-dropdown .dropdown-toggle,
.difficulty-dropdown .dropdown-toggle,
.priority-dropdown .dropdown-toggle {
  border: none;
  border-radius: 5px;
  padding: 5px 10px;
  font-weight: bold;
  cursor: pointer;
  transition: transform 0.2s ease-in-out;
  color: #fff; /* texto blanco */
}

.status-dropdown .dropdown-toggle:hover,
.difficulty-dropdown .dropdown-toggle:hover,
.priority-dropdown .dropdown-toggle:hover {
  transform: translateY(-2px);
}

/* El menú: anchura mínima */
.status-dropdown .dropdown-menu,
.difficulty-dropdown .dropdown-menu,
.priority-dropdown .dropdown-menu {
  min-width: 150px;
}

/* Items de color */
.status-dropdown .dropdown-item.status-pending {
  color: var(--primary-blue);
}
.status-dropdown .dropdown-item.status-in-progress {
  color: var(--primary-yellow);
}
.status-dropdown .dropdown-item.status-completed {
  color: var(--primary-green);
}

/* ... etc. en la misma línea para difficulty, priority ... */

.complete-button {
  align-self: flex-start;
  background-color: var(--primary-green);
  color: white;
  border: none;
  padding: 8px 12px;
  border-radius: 5px;
  transition: background-color 0.3s, transform 0.2s;
  font-weight: bold;
}

.complete-button:hover {
  background-color: #218838;
  transform: translateY(-2px);
}

.unarchive-button {
  align-self: flex-start;
  background-color: var(--accent-cyan);
  color: white;
  border: none;
  padding: 8px 12px;
  border-radius: 5px;
  transition: background-color 0.3s, transform 0.2s;
  font-weight: bold;
}

.unarchive-button:hover {
  background-color: #138496;
  transform: translateY(-2px);
}

.timer-button {
  align-self: flex-start;
  margin-top: 10px;
}

.timer-button .btn {
  transition: background-color 0.3s, transform 0.2s;
}

.timer-button .btn:hover {
  transform: translateY(-2px);
}

/* Menú items color */
.complete-dropdown-item {
  color: var(--primary-green);
}
.continue-dropdown-item {
  color: var(--primary-yellow);
}
.archive-dropdown-item {
  color: var(--secondary-gray);
}
.unarchive-dropdown-item {
  color: var(--accent-cyan);
}
.delete-dropdown-item {
  color: var(--primary-red);
}

/* Tipografía */
.task-item h3 {
  color: var(--primary-blue);
  font-size: 1.4rem;
  margin-bottom: 5px;
}

.task-item p {
  font-size: 1rem;
  color: var(--text-color);
  line-height: 1.5;
}

.timer-container {
  margin-top: 10px;
  display: flex;
  align-items: center;
  gap: 10px;
}

.timer-container p {
  font-size: 1rem;
  color: var(--text-color);
}

----- frontend/src/components/TaskList/TaskList.css -----
/* frontend/src/components/TaskList/TaskList.css */

.task-list {
    background-color: var(--neutral-white);
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    position: relative;
  }
  
  .filter-toggle {
    position: absolute;
    top: -15px;
    right: 0;
    z-index: 1;
    display: flex;
    align-items: center;
    gap: 5px;
  }
  
  .filters {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 25px;
    gap: 15px;
    flex-wrap: wrap;
    background-color: var(--secondary-light-gray);
    padding: 15px;
    border-radius: 8px;
  }
  
  .filters .form-group {
    flex: 1;
    min-width: 200px;
  }
  
  .filters .form-group label {
    font-weight: bold;
    color: var(--text-color);
  }
  
  .filters .form-check-input:checked {
    background-color: var(--primary-blue);
    border-color: var(--primary-blue);
  }
  
  .task-container {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  /* Estilo para el efecto de arrastre */
  .dragging {
    background-color: rgba(0, 123, 255, 0.1); /* un azul clarito */
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    transform: rotate(3deg) scale(1.02);
    transition: transform 0.2s, box-shadow 0.2s, background-color 0.3s;
  }
  
----- frontend/src/components/TaskList/TaskList.js -----
// frontend/src/components/TaskList/TaskList.js

import React, { useState } from 'react';
import TaskItem from '../TaskItem/TaskItem';
import './TaskList.css';
import { Form, Row, Col, Button } from 'react-bootstrap';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { FaFilter, FaTimes } from 'react-icons/fa';

// Importamos el hook de sonido
import useSound from '../../hooks/useSound';
// Sonido para drag & drop
import dragSoundFile from '../../assets/sounds/navigation-sound-2-269295.mp3';

function TaskList({ tasks, setTasks }) {
  const [filters, setFilters] = useState({
    priority: [],
    difficulty: [],
    status: [],
  });
  const [showFilters, setShowFilters] = useState(false);

  // Hook para reproducir sonido
  const playDragSound = useSound(dragSoundFile);

  const getFilteredTasks = () => {
    let filtered = [...tasks];
    // Filtro Prioridad
    if (filters.priority.length > 0) {
      filtered = filtered.filter((task) =>
        filters.priority.includes(task.priority)
      );
    }
    // Filtro Dificultad
    if (filters.difficulty.length > 0) {
      filtered = filtered.filter((task) =>
        filters.difficulty.includes(task.difficulty.toString())
      );
    }
    // Filtro Estado
    if (filters.status.length > 0) {
      filtered = filtered.filter((task) =>
        filters.status.includes(task.status)
      );
    }
    return filtered;
  };

  const handleFilterChange = (category, value) => {
    setFilters((prevFilters) => {
      const alreadySelected = prevFilters[category].includes(value);
      const newArray = alreadySelected
        ? prevFilters[category].filter((item) => item !== value)
        : [...prevFilters[category], value];
      return { ...prevFilters, [category]: newArray };
    });
  };

  const handleClearFilters = () => {
    setFilters({
      priority: [],
      difficulty: [],
      status: [],
    });
  };

  // Lógica drag & drop
  const handleOnDragEnd = (result) => {
    if (!result.destination) return;

    // Reproducir sonido
    playDragSound();

    const items = Array.from(tasks);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);
    setTasks(items);
    // Opcional: Actualizar orden en backend
  };

  const filteredTasks = getFilteredTasks();

  return (
    <div className="task-list">
      <Button
        variant="outline-primary"
        className="filter-toggle"
        onClick={() => setShowFilters(!showFilters)}
      >
        {showFilters ? <FaTimes /> : <FaFilter />}{' '}
        {showFilters ? 'Ocultar Filtros' : 'Mostrar Filtros'}
      </Button>

      {showFilters && (
        <div className="filters">
          <Form>
            <Row>
              <Col md={4} sm={12}>
                <Form.Group>
                  <Form.Label>
                    <FaFilter /> Prioridad
                  </Form.Label>
                  <Form.Check
                    type="checkbox"
                    label="Baja"
                    value="Low"
                    checked={filters.priority.includes('Low')}
                    onChange={() => handleFilterChange('priority', 'Low')}
                  />
                  <Form.Check
                    type="checkbox"
                    label="Media"
                    value="Medium"
                    checked={filters.priority.includes('Medium')}
                    onChange={() => handleFilterChange('priority', 'Medium')}
                  />
                  <Form.Check
                    type="checkbox"
                    label="Alta"
                    value="High"
                    checked={filters.priority.includes('High')}
                    onChange={() => handleFilterChange('priority', 'High')}
                  />
                </Form.Group>
              </Col>

              <Col md={4} sm={12}>
                <Form.Group>
                  <Form.Label>
                    <FaFilter /> Dificultad
                  </Form.Label>
                  <Form.Check
                    type="checkbox"
                    label="1 - Fácil"
                    value="1"
                    checked={filters.difficulty.includes('1')}
                    onChange={() => handleFilterChange('difficulty', '1')}
                  />
                  <Form.Check
                    type="checkbox"
                    label="2 - Medio"
                    value="2"
                    checked={filters.difficulty.includes('2')}
                    onChange={() => handleFilterChange('difficulty', '2')}
                  />
                  <Form.Check
                    type="checkbox"
                    label="3 - Difícil"
                    value="3"
                    checked={filters.difficulty.includes('3')}
                    onChange={() => handleFilterChange('difficulty', '3')}
                  />
                </Form.Group>
              </Col>

              <Col md={4} sm={12}>
                <Form.Group>
                  <Form.Label>
                    <FaFilter /> Estado
                  </Form.Label>
                  <Form.Check
                    type="checkbox"
                    label="Pendiente"
                    value="Pending"
                    checked={filters.status.includes('Pending')}
                    onChange={() => handleFilterChange('status', 'Pending')}
                  />
                  <Form.Check
                    type="checkbox"
                    label="En Progreso"
                    value="In Progress"
                    checked={filters.status.includes('In Progress')}
                    onChange={() => handleFilterChange('status', 'In Progress')}
                  />
                  <Form.Check
                    type="checkbox"
                    label="Completado"
                    value="Completed"
                    checked={filters.status.includes('Completed')}
                    onChange={() => handleFilterChange('status', 'Completed')}
                  />
                </Form.Group>
              </Col>
            </Row>
            <Button
              variant="secondary"
              onClick={handleClearFilters}
              className="mt-3"
            >
              Limpiar Filtros
            </Button>
          </Form>
        </div>
      )}

      <DragDropContext onDragEnd={handleOnDragEnd}>
        <Droppable droppableId="task-droppable">
          {(provided) => (
            <div
              className="task-container"
              {...provided.droppableProps}
              ref={provided.innerRef}
            >
              {filteredTasks.length > 0 ? (
                filteredTasks.map((task, index) => (
                  <Draggable
                    key={task.id}
                    draggableId={task.id.toString()}
                    index={index}
                  >
                    {(provided, snapshot) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        className={snapshot.isDragging ? 'dragging' : ''}
                      >
                        <TaskItem
                          task={task}
                          onComplete={(updatedTask) =>
                            setTasks((prev) =>
                              prev.map((t) =>
                                t.id === updatedTask.id ? updatedTask : t
                              )
                            )
                          }
                          onDelete={(id) =>
                            setTasks((prev) => prev.filter((t) => t.id !== id))
                          }
                          onEdit={(updatedTask) =>
                            setTasks((prev) =>
                              prev.map((t) =>
                                t.id === updatedTask.id ? updatedTask : t
                              )
                            )
                          }
                          onArchive={(updatedTask) =>
                            setTasks((prev) =>
                              prev.filter((t) => t.id !== updatedTask.id)
                            )
                          }
                          onUnarchive={(updatedTask) =>
                            setTasks((prev) => [...prev, updatedTask])
                          }
                        />
                      </div>
                    )}
                  </Draggable>
                ))
              ) : (
                <p>No hay tareas que coincidan con los filtros seleccionados.</p>
              )}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>
    </div>
  );
}

export default TaskList;

----- frontend/src/components/UserList/UserList.js -----

----- frontend/src/components/UserItem/UserItem.js -----

----- frontend/src/components/ConfirmModal/ConfirmModal.css -----
/* ConfirmModal.css */

.modal-body p {
    font-size: 16px;
    color: var(--text-color);
}

.modal-footer button {
    min-width: 100px;
}

@media (max-width: 576px) {
    .modal-content {
        padding: 10px;
    }

    .modal-header,
    .modal-footer {
        padding: 10px;
    }
}

/* Estilos para los botones del modal */
.btn-secondary {
    background-color: #6c757d;
    border: none;
    color: white;
    transition: background-color 0.3s;
}

.btn-secondary:hover {
    background-color: #5a6268;
}

.btn-danger {
    background-color: #dc3545;
    border: none;
    color: white;
    transition: background-color 0.3s;
}

.btn-danger:hover {
    background-color: #c82333;
}

----- frontend/src/components/ConfirmModal/ConfirmModal.js -----
// frontend/src/components/ConfirmModal/ConfirmModal.js

import React from 'react';
import { Modal, Button } from 'react-bootstrap';
import './ConfirmModal.css';

function ConfirmModal({ show, handleClose, handleConfirm, title, body }) {
  return (
    <Modal show={show} onHide={handleClose} centered>
      <Modal.Header closeButton>
        <Modal.Title>{title || 'Confirmación'}</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <p>{body || '¿Estás seguro?'}</p>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={handleClose}>
          Cancelar
        </Button>
        <Button variant="danger" onClick={handleConfirm}>
          Confirmar
        </Button>
      </Modal.Footer>
    </Modal>
  );
}

export default ConfirmModal;

----- frontend/src/components/Header/Header.js -----
// frontend/src/components/Header/Header.js

import React, { useState, useEffect } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import authService from '../../services/authService';
import useSound from '../../hooks/useSound';
import menuClickSoundFile from '../../assets/sounds/notification-pluck-on-269288.mp3'; // el que pediste
import { Dropdown } from 'react-bootstrap';
import './Header.css';

function Header() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [profilePicUrl, setProfilePicUrl] = useState('');
  const [profileName, setProfileName] = useState('');
  const [theme, setTheme] = useState('default');

  const playMenuClick = useSound(menuClickSoundFile);

  useEffect(() => {
    const currentUser = authService.getCurrentUser();
    if (!currentUser) {
      setUser(null);
    } else {
      setUser(currentUser);
      fetchProfileData(currentUser.token);
    }
  }, []);

  const fetchProfileData = async (token) => {
    try {
      const res = await fetch('/api/profile', {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (res.ok) {
        const data = await res.json();
        setProfileName(data.name || '');
        setProfilePicUrl(data.profile_picture_url || '');
      }
    } catch (err) {
      console.error('Error fetchProfileData:', err);
      setProfilePicUrl('');
      setProfileName('');
    }
  };

  const handleLogout = () => {
    playMenuClick();
    authService.logout();
    setUser(null);
    setProfilePicUrl('');
    setProfileName('');
    navigate('/login');
  };

  const handleEditProfile = () => {
    playMenuClick();
    navigate('/profile');
  };

  return (
    <header className="main-header">
      <div className="header-left">
        <h1>Planner2025 — ¡Bienvenido, {profileName || 'Usuario'}!</h1>
      </div>

      <div className="header-right">
        <div className="theme-selector">
          <label htmlFor="theme-select">Tema:</label>
          <select
            id="theme-select"
            value={theme}
            onChange={(e) => setTheme(e.target.value)}
          >
            <option value="default">Default</option>
            <option value="dark">Oscuro</option>
            <option value="pink">Rosa</option>
          </select>
        </div>

        <nav className="nav-links">
          <NavLink to="/" onClick={playMenuClick}>
            Home
          </NavLink>
          {user ? (
            <>
              <NavLink to="/tasks" onClick={playMenuClick}>
                Tareas
              </NavLink>
              <NavLink to="/archived-tasks" onClick={playMenuClick}>
                Archivadas
              </NavLink>
              <NavLink to="/task-metrics" onClick={playMenuClick}>
                Métricas
              </NavLink>
              <NavLink to="/friends" onClick={playMenuClick}>
                Amigos
              </NavLink>
              {user.role === 'admin' && (
                <NavLink to="/admin" onClick={playMenuClick}>
                  Admin
                </NavLink>
              )}
            </>
          ) : (
            <>
              <NavLink to="/login" onClick={playMenuClick}>
                Iniciar Sesión
              </NavLink>
              <NavLink to="/register" onClick={playMenuClick}>
                Registrarse
              </NavLink>
            </>
          )}
        </nav>

        {/* Imagen de perfil + dropdown */}
        {user && (
          <Dropdown className="profile-dropdown">
            <Dropdown.Toggle variant="link" id="profile-dropdown-toggle">
              <img
                src={
                  profilePicUrl?.trim()
                    ? profilePicUrl
                    : '/default_silueta.jpeg'
                }
                alt="Mi Perfil"
                className="profile-picture-header"
                onClick={playMenuClick}
              />
            </Dropdown.Toggle>
            <Dropdown.Menu align="end">
              <Dropdown.Item onClick={handleEditProfile}>
                Editar Perfil
              </Dropdown.Item>
              <Dropdown.Item onClick={handleLogout}>
                Logout
              </Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>
        )}
      </div>
    </header>
  );
}

export default Header;

----- frontend/src/components/Header/Header.css -----
/* frontend/src/components/Header/Header.css */

.main-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background-color: #007bff;
    color: #fff;
    padding: 10px 20px;
  }
  
  .header-left h1 {
    margin: 0;
    font-size: 1.5rem;
  }
  
  .header-right {
    display: flex;
    align-items: center;
    gap: 20px;
  }
  
  /* Selector de tema */
  .theme-selector {
    display: flex;
    align-items: center;
    gap: 5px;
    color: #fff;
  }
  
  .theme-selector label {
    font-weight: bold;
  }
  
  /* Navegación */
  .nav-links {
    display: flex;
    gap: 15px;
  }
  
  .nav-links a {
    color: #fff;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s;
  }
  
  .nav-links a:hover {
    color: #f0f0f0;
  }
  
  /* Profile dropdown en el extremo derecho */
  .profile-dropdown {
    position: relative;
  }
  
  /* Imagen de perfil en el header, más grande */
  .profile-picture-header {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #fff;
    cursor: pointer;
    transition: transform 0.3s;
  }
  
  .profile-picture-header:hover {
    transform: scale(1.05);
  }
  
----- frontend/src/hooks/useSound.js -----
// frontend/src/hooks/useSound.js

import { useEffect, useRef } from 'react';

const useSound = (src, options = {}) => {
  const audioRef = useRef(null);

  useEffect(() => {
    audioRef.current = new Audio(src);

    if (options.loop) {
      audioRef.current.loop = true;
    }

    return () => {
      // Si deseas pausar al desmontar, se hace aquí.
      // Pero para evitar el error de “interrupted by a call to pause()”,
      // lo encapsulamos en un try/catch o lo removemos si no es necesario.
      try {
        audioRef.current.pause();
      } catch (err) {
        console.warn('Audio pause interrupted:', err);
      }
    };
  }, [src, options.loop]);

  const play = async () => {
    if (audioRef.current) {
      audioRef.current.currentTime = 0;
      try {
        await audioRef.current.play();
      } catch (err) {
        console.warn('Audio play was interrupted:', err);
      }
    }
  };

  const pause = () => {
    if (audioRef.current) {
      audioRef.current.pause();
    }
  };

  return play;
};

export default useSound;

----- frontend/src/pages/RegisterPage/RegisterPage.css -----
/* frontend/src/pages/RegisterPage/RegisterPage.css */

.register-page-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 40px;
    max-width: 400px;
    margin: 0 auto;
  }
  
  .register-page-container h1 {
    margin-bottom: 20px;
    color: #333;
  }
  
  .register-page-container .alert {
    width: 100%;
  }
  
----- frontend/src/pages/RegisterPage/RegisterPage.js -----
// frontend/src/pages/RegisterPage/RegisterPage.js

import React, { useState } from 'react';
import RegisterForm from '../../components/RegisterForm/RegisterForm'; // Ruta corregida
import authService from '../../services/authService'; 
import { useNavigate } from 'react-router-dom';
import { Alert } from 'react-bootstrap';
import './RegisterPage.css';

function RegisterPage({ onLogin }) {
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const navigate = useNavigate();

  const handleRegister = async (userData) => {
    try {
      const user = await authService.register(userData);
      onLogin(user); // Autenticación automática después del registro
      setSuccess('Usuario registrado y autenticado con éxito.');
      setError(null);
      navigate('/'); // Redirige a la página principal o a donde desees
    } catch (error) {
      // Manejar errores específicos si el backend envía mensajes
      setError(error.response?.data?.msg || error.message);
      setSuccess(null);
    }
  };

  return (
    <div>
      <h1>Registrarse</h1>
      {error && <Alert variant="danger">{error}</Alert>}
      {success && <Alert variant="success">{success}</Alert>}
      <RegisterForm onRegister={handleRegister} />
    </div>
  );
}

export default RegisterPage;

----- frontend/src/pages/HomePage/HomePage.js -----
// frontend/src/pages/HomePage.js
import React, { useEffect, useState } from 'react';
import authService from '../../services/authService';

function HomePage() {
  const [profile, setProfile] = useState(null);

  useEffect(() => {
    const user = authService.getCurrentUser();
    if (!user) return;
    fetch('/api/profile', {
      headers: {
        Authorization: `Bearer ${user.token}`,
      },
    })
      .then((res) => res.json())
      .then((data) => setProfile(data))
      .catch((err) => console.error(err));
  }, []);

  return (
    <div>
      <h1>Bienvenido a Planner2025</h1>
      <p>Página principal de la aplicación.</p>
      {profile?.profile_picture_url && (
        <img
          src={profile.profile_picture_url}
          alt="Mi Foto"
          style={{ width: '100px', height: '100px', borderRadius: '50%' }}
        />
      )}
    </div>
  );
}

export default HomePage;

----- frontend/src/pages/TaskPage/TaskPage.js -----
// frontend/src/pages/TaskPage/TaskPage.js
import React, { useState, useEffect } from 'react';
import TaskForm from '../../components/TaskForm/TaskForm';
import TaskList from '../../components/TaskList/TaskList';
import './TaskPage.css';
import { Alert } from 'react-bootstrap';
import authService from '../../services/authService';

function TaskPage() {
  const [tasks, setTasks] = useState([]);
  const [error, setError] = useState(null);
  const [message, setMessage] = useState('');

  const fetchTasks = async () => {
    try {
      const user = authService.getCurrentUser();
      if (!user) {
        setError('No hay usuario autenticado');
        return;
      }
      const response = await fetch('/api/tasks', {
        headers: { Authorization: `Bearer ${user.token}` },
      });
      if (!response.ok) {
        throw new Error('Error al obtener las tareas');
      }
      const data = await response.json();
      setTasks(data);
    } catch (err) {
      console.error('Error al obtener las tareas:', err);
      setError('Error al obtener las tareas');
    }
  };

  useEffect(() => {
    fetchTasks();
    // eslint-disable-next-line
  }, []);

  return (
    <div className="task-page">
      <h2>Gestor de Tareas</h2>
      {error && <Alert variant="danger">{error}</Alert>}
      {message && <Alert variant="success">{message}</Alert>}

      <div className="task-layout">
        <div className="task-form-column">
          <TaskForm
            onTaskAdded={(newTask) => {
              setTasks((prev) => [newTask, ...prev]);
              setMessage('¡Tarea agregada exitosamente!');
              setTimeout(() => setMessage(''), 3000);
            }}
          />
        </div>
        <div className="task-list-column">
          <TaskList tasks={tasks} setTasks={setTasks} />
        </div>
      </div>
    </div>
  );
}

export default TaskPage;

----- frontend/src/pages/TaskPage/TaskPage.css -----
.task-page {
    padding: 25px;
  }
  
  .task-page h2 {
    margin-bottom: 25px;
    color: var(--primary-blue);
    text-align: center;
  }
  
  .task-layout {
    display: flex;
    gap: 30px;
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .task-form-column {
    flex: 1;
    min-width: 300px;
    background-color: var(--neutral-white);
    padding: 25px;
    border-radius: 12px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }
  
  .task-list-column {
    flex: 2;
    min-width: 300px;
  }
  
----- frontend/src/pages/LoginPage/LoginPage.js -----
// frontend/src/pages/LoginPage/LoginPage.js

import React, { useState } from 'react';
import LoginForm from '../../components/LoginForm/LoginForm'; // Ruta corregida
import authService from '../../services/authService';
import { useNavigate } from 'react-router-dom';
import { Alert } from 'react-bootstrap';
import './LoginPage.css';

function LoginPage({ onLogin }) {
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  const handleLogin = async (credentials) => {
    try {
      const user = await authService.login(credentials);
      if (user) {
        onLogin(user);
        setError(null);
        navigate('/'); // Redirige a la página principal o a donde desees
      }
    } catch (error) {
      // Manejar errores específicos si el backend envía mensajes
      setError(error.response?.data?.msg || error.message);
    }
  };

  return (
    <div>
      <h1>Iniciar Sesión</h1>
      {error && <Alert variant="danger">{error}</Alert>}
      <LoginForm onLogin={handleLogin} />
    </div>
  );
}

export default LoginPage;

----- frontend/src/pages/LoginPage/LoginPage.css -----
.login-page-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 40px;
    max-width: 400px;
    margin: 0 auto;
  }
  
  .login-page-container h1 {
    margin-bottom: 20px;
    color: #333;
  }
  
  .login-page-container .alert {
    width: 100%;
  }
----- frontend/src/pages/ArchivedTasksPage/ArchivedTasksPage.js -----
// frontend/src/pages/ArchivedTasksPage/ArchivedTasksPage.js

import React, { useState, useEffect } from 'react';
import TaskItem from '../../components/TaskItem/TaskItem'; // Ruta corregida
import ConfirmModal from '../../components/ConfirmModal/ConfirmModal'; // Ruta corregida
import './ArchivedTasksPage.css';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { Alert } from 'react-bootstrap';
import authService from '../../services/authService';

function ArchivedTasksPage() {
  const [archivedTasks, setArchivedTasks] = useState([]);
  const [error, setError] = useState(null);
  const [actionError, setActionError] = useState('');
  
  // Eliminar
  const [taskToDelete, setTaskToDelete] = useState(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);

  const fetchArchivedTasks = async () => {
    try {
      const user = authService.getCurrentUser();
      if (!user) {
        setError('No hay usuario autenticado');
        return;
      }
      const response = await fetch('/api/tasks/archived', {
        headers: { Authorization: `Bearer ${user.token}` },
      });
      if (!response.ok) {
        throw new Error('Error al obtener las tareas archivadas');
      }
      const data = await response.json();
      setArchivedTasks(data);
    } catch (err) {
      console.error('Error al obtener tareas archivadas:', err);
      setError('Error al obtener tareas archivadas');
    }
  };

  useEffect(() => {
    fetchArchivedTasks();
    // eslint-disable-next-line
  }, []);

  // Desarchivar
  const handleUnarchive = async (id) => {
    setActionError('');
    try {
      const user = authService.getCurrentUser();
      const response = await fetch(`/api/tasks/${id}/unarchive`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${user.token}`,
        },
      });
      if (response.ok) {
        setArchivedTasks((prev) => prev.filter((t) => t.id !== id));
      } else {
        const errorData = await response.json();
        setActionError(errorData.error || 'Error al desarchivar la tarea');
      }
    } catch (error) {
      console.error('Error al desarchivar la tarea:', error);
      setActionError('Error al desarchivar la tarea');
    }
  };

  // Editar Tarea archivada
  const handleEdit = async (id, updatedTask) => {
    setActionError('');
    try {
      const user = authService.getCurrentUser();
      const response = await fetch(`/api/tasks/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user.token}`,
        },
        body: JSON.stringify(updatedTask),
      });
      if (response.ok) {
        const data = await response.json();
        setArchivedTasks((prev) => prev.map((t) => (t.id === id ? data : t)));
      } else {
        const errorData = await response.json();
        setActionError(errorData.error || 'Error al editar la tarea archivada');
      }
    } catch (error) {
      console.error('Error al editar la tarea archivada:', error);
      setActionError('Error al editar la tarea archivada');
    }
  };

  // Eliminar Tarea archivada
  const handleDelete = (task) => {
    setTaskToDelete(task);
    setShowDeleteConfirm(true);
  };

  const confirmDelete = async () => {
    setActionError('');
    try {
      const user = authService.getCurrentUser();
      const response = await fetch(`/api/tasks/${taskToDelete.id}`, {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${user.token}` },
      });
      if (response.ok) {
        setArchivedTasks((prev) => prev.filter((t) => t.id !== taskToDelete.id));
        setShowDeleteConfirm(false);
        setTaskToDelete(null);
      } else {
        const errorData = await response.json();
        setActionError(errorData.error || 'Error al eliminar la tarea archivada');
      }
    } catch (error) {
      console.error('Error al eliminar la tarea archivada:', error);
      setActionError('Error al eliminar la tarea archivada');
    }
  };

  const handleDeleteCancel = () => {
    setShowDeleteConfirm(false);
    setTaskToDelete(null);
  };

  // Drag & Drop archivadas
  const handleOnDragEnd = (result) => {
    if (!result.destination) return;
    const items = Array.from(archivedTasks);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);
    setArchivedTasks(items);
    // Opcional: actualizar orden en backend
  };

  return (
    <div className="archived-tasks-page">
      <h2>Tareas Archivadas</h2>
      {error && <Alert variant="danger">{error}</Alert>}
      {actionError && <Alert variant="danger">{actionError}</Alert>}

      <DragDropContext onDragEnd={handleOnDragEnd}>
        <Droppable droppableId="archivedTasks">
          {(provided) => (
            <div
              className="task-container"
              {...provided.droppableProps}
              ref={provided.innerRef}
            >
              {archivedTasks.length > 0 ? (
                archivedTasks.map((task, index) => (
                  <Draggable
                    key={task.id}
                    draggableId={task.id.toString()}
                    index={index}
                  >
                    {(provided, snapshot) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        {...provided.dragHandleProps}
                        className={snapshot.isDragging ? 'dragging' : ''}
                      >
                        <TaskItem
                          task={task}
                          onUnarchive={handleUnarchive}
                          onEdit={handleEdit}
                          onDelete={handleDelete}
                        />
                      </div>
                    )}
                  </Draggable>
                ))
              ) : (
                <p>No hay tareas archivadas.</p>
              )}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>

      {taskToDelete && (
        <ConfirmModal
          show={showDeleteConfirm}
          handleClose={handleDeleteCancel}
          handleConfirm={confirmDelete}
          title="Confirmar Eliminación"
          body="¿Estás seguro de que deseas eliminar esta tarea archivada? Esta acción no se puede deshacer."
        />
      )}
    </div>
  );
}

export default ArchivedTasksPage;

----- frontend/src/pages/ArchivedTasksPage/ArchivedTasksPage.css -----
/* frontend/src/pages/ArchivedTasksPage.css */

.archived-tasks-page {
    padding: 20px;
}

.archived-tasks-page h2 {
    margin-bottom: 20px;
    color: #333;
}

.task-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.error {
    color: var(--danger-color);
}

----- frontend/src/pages/AdminPage/AdminPage.js -----
// frontend/src/pages/AdminPage/AdminPage.js

import React, { useEffect, useState } from 'react';
import authService from '../../services/authService';
import { Table, Alert, Button, Modal, Form } from 'react-bootstrap';
import './AdminPage.css';

function AdminPage() {
  const [users, setUsers] = useState([]);
  const [error, setError] = useState(null);

  // Para editar
  const [showEditModal, setShowEditModal] = useState(false);
  const [editUser, setEditUser] = useState({ id: '', name: '' });

  // Para crear
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [newUser, setNewUser] = useState({
    name: '',
    email: '',
    password: '',
    role: 'user',
  });

  useEffect(() => {
    fetchUsers();
    // eslint-disable-next-line
  }, []);

  const fetchUsers = async () => {
    try {
      const currentUser = authService.getCurrentUser();
      if (!currentUser || !currentUser.token) {
        setError('No hay usuario logueado o no tienes permisos.');
        return;
      }
      const response = await fetch('/api/users', {
        headers: {
          Authorization: `Bearer ${currentUser.token}`,
        },
      });
      if (!response.ok) {
        throw new Error('Error al obtener usuarios');
      }
      const data = await response.json();
      setUsers(data);
    } catch (err) {
      console.error('Error al obtener usuarios:', err);
      setError('Error al obtener usuarios');
    }
  };

  // Abrir modal de edición
  const handleOpenEdit = (user) => {
    setEditUser({ id: user.id, name: user.name });
    setShowEditModal(true);
  };

  const handleEditChange = (e) => {
    setEditUser({ ...editUser, [e.target.name]: e.target.value });
  };

  const handleSaveEdit = async () => {
    try {
      setError(null);
      const currentUser = authService.getCurrentUser();
      const response = await fetch(`/api/users/${editUser.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${currentUser.token}`,
        },
        body: JSON.stringify({ name: editUser.name }),
      });
      if (!response.ok) {
        throw new Error('Error al actualizar usuario');
      }
      await response.json();
      setShowEditModal(false);
      fetchUsers();
    } catch (err) {
      console.error(err);
      setError('No se pudo actualizar el usuario.');
    }
  };

  // Eliminar usuario
  const handleDelete = async (id) => {
    try {
      setError(null);
      const currentUser = authService.getCurrentUser();
      const response = await fetch(`/api/users/${id}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${currentUser.token}`,
        },
      });
      if (!response.ok) {
        throw new Error('Error al eliminar usuario');
      }
      await response.json();
      fetchUsers();
    } catch (err) {
      console.error(err);
      setError('No se pudo eliminar el usuario.');
    }
  };

  // Crear usuario
  const handleCreateUser = async () => {
    try {
      setError(null);
      // Podrías usar /api/auth/register (y forzar role='admin'),
      // o tener un endpoint /api/users con POST
      const currentUser = authService.getCurrentUser();
      // EJEMPLO: USANDO /api/auth/register con role
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${currentUser.token}`, // si exiges token
        },
        body: JSON.stringify({
          name: newUser.name,
          email: newUser.email,
          password: newUser.password,
          // role: newUser.role, // si tu backend lo permite
        }),
      });
      if (!response.ok) {
        throw new Error('Error al crear usuario');
      }
      await response.json();
      setShowCreateModal(false);
      fetchUsers();
    } catch (err) {
      console.error(err);
      setError('No se pudo crear el usuario.');
    }
  };

  return (
    <div className="admin-container">
      <h1>Panel de Administración</h1>
      {error && <Alert variant="danger">{error}</Alert>}

      <Button variant="success" className="mb-3" onClick={() => setShowCreateModal(true)}>
        Crear Usuario
      </Button>

      {users.length > 0 ? (
        <Table striped bordered hover responsive className="admin-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>Nombre</th>
              <th>Email</th>
              <th>Rol</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {users.map((u) => (
              <tr key={u.id}>
                <td>{u.id}</td>
                <td>{u.name}</td>
                <td>{u.email}</td>
                <td>{u.role}</td>
                <td>
                  <Button variant="info" size="sm" onClick={() => handleOpenEdit(u)}>
                    Editar
                  </Button>{' '}
                  <Button variant="danger" size="sm" onClick={() => handleDelete(u.id)}>
                    Eliminar
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      ) : (
        <p>No hay usuarios disponibles.</p>
      )}

      {/* Modal para editar usuario */}
      <Modal show={showEditModal} onHide={() => setShowEditModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>Editar Usuario</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form.Group>
            <Form.Label>Nombre</Form.Label>
            <Form.Control
              type="text"
              name="name"
              value={editUser.name}
              onChange={handleEditChange}
            />
          </Form.Group>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowEditModal(false)}>
            Cancelar
          </Button>
          <Button variant="primary" onClick={handleSaveEdit}>
            Guardar
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Modal para crear usuario */}
      <Modal show={showCreateModal} onHide={() => setShowCreateModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>Crear Usuario</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form.Group>
            <Form.Label>Nombre</Form.Label>
            <Form.Control
              type="text"
              value={newUser.name}
              onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}
            />
          </Form.Group>
          <Form.Group className="mt-3">
            <Form.Label>Email</Form.Label>
            <Form.Control
              type="email"
              value={newUser.email}
              onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}
            />
          </Form.Group>
          <Form.Group className="mt-3">
            <Form.Label>Contraseña</Form.Label>
            <Form.Control
              type="password"
              value={newUser.password}
              onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}
            />
          </Form.Group>
          {/* Si deseas elegir rol: */}
          {/* <Form.Group className="mt-3">
            <Form.Label>Rol</Form.Label>
            <Form.Select
              value={newUser.role}
              onChange={(e) => setNewUser({ ...newUser, role: e.target.value })}
            >
              <option value="user">user</option>
              <option value="admin">admin</option>
            </Form.Select>
          </Form.Group> */}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowCreateModal(false)}>
            Cancelar
          </Button>
          <Button variant="success" onClick={handleCreateUser}>
            Crear
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
}

export default AdminPage;

----- frontend/src/pages/AdminPage/AdminPage.css -----
/* frontend/src/pages/AdminPage.css */

.admin-container {
    padding: 20px;
    max-width: 900px;
    margin: 0 auto;
  }
  
  .admin-container h1 {
    text-align: center;
    margin-bottom: 30px;
    color: #333;
  }
  
  .admin-table {
    background-color: #fff;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }
  
  .admin-table th {
    background-color: #007bff;
    color: #fff;
  }
  
  .admin-table td {
    vertical-align: middle;
  }
  
----- frontend/src/pages/TaskMetricsPage/TaskMetricsPage.js -----
// frontend/src/pages/TaskMetricsPage/TaskMetricsPage.js

import React, { useState, useEffect } from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  Legend,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  ResponsiveContainer
} from 'recharts';
import { Alert, Form } from 'react-bootstrap';
import authService from '../../services/authService';

function TaskMetricsPage() {
  const [stats, setStats] = useState({
    totalTasks: 0,
    completed: 0,
    pending: 0,
    inProgress: 0,
    stackedData: []
  });
  const [error, setError] = useState(null);
  const [filter, setFilter] = useState('all'); // 'owner' | 'collaborator' | 'all'

  const pieColors = ['#28a745', '#ffc107', '#007bff'];
  const difficultyColors = ['#6f42c1', '#20c997', '#fd7e14', '#dc3545', '#17a2b8'];

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const user = authService.getCurrentUser();
        if (!user || !user.token) {
          throw new Error('No hay usuario logueado o token no disponible');
        }
        // Llamar al backend con Bearer token y enviar un param ?filter=...
        // Podrías tener /api/tasks/stats?filter=owner
        const response = await fetch(`/api/tasks/stats?filter=${filter}`, {
          headers: {
            Authorization: `Bearer ${user.token}`,
          },
        });
        if (!response.ok) {
          throw new Error('Error al obtener estadísticas');
        }
        const data = await response.json();
        setStats(data);
      } catch (err) {
        console.error('Error al obtener estadísticas:', err);
        setError('Error al obtener estadísticas');
      }
    };
    fetchStats();
  }, [filter]);

  // Pie chart
  const pieData = [
    { name: 'Completadas', value: stats.completed },
    { name: 'Pendientes', value: stats.pending },
    { name: 'En Progreso', value: stats.inProgress }
  ];

  const safeStackedData = stats.stackedData || [];

  const allKeys = new Set();
  safeStackedData.forEach((item) => {
    Object.keys(item).forEach((k) => {
      if (k.startsWith('difficulty_')) {
        allKeys.add(k);
      }
    });
  });
  const difficultyKeys = Array.from(allKeys).sort();

  return (
    <div className="container my-4">
      <h2 className="text-center">Task Metrics Dashboard</h2>
      {error && <Alert variant="danger">{error}</Alert>}

      {/* Selector de filtro */}
      <Form.Group>
        <Form.Label>Filtrar Tareas por Rol</Form.Label>
        <Form.Select value={filter} onChange={(e) => setFilter(e.target.value)}>
          <option value="all">Todo</option>
          <option value="owner">Solo Owner</option>
          <option value="collaborator">Solo Colaborador</option>
        </Form.Select>
      </Form.Group>

      <div className="row mt-4">
        {/* Pie chart */}
        <div className="col-md-6">
          <h4 className="text-center">Estado de Tareas</h4>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={pieData}
                dataKey="value"
                nameKey="name"
                cx="50%"
                cy="50%"
                outerRadius={90}
                label
              >
                {pieData.map((entry, index) => (
                  <Cell
                    key={`cell-${index}`}
                    fill={pieColors[index % pieColors.length]}
                  />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>

        {/* Stacked Bar Chart */}
        <div className="col-md-6">
          <h4 className="text-center">Prioridad (Barras apiladas por Dificultad)</h4>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart
              data={safeStackedData}
              margin={{ top: 20, right: 30, left: 0, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="priority" />
              <YAxis allowDecimals={false} />
              <Tooltip />
              <Legend />
              {difficultyKeys.map((diffKey, idx) => (
                <Bar
                  key={diffKey}
                  dataKey={diffKey}
                  stackId="stack"
                  fill={difficultyColors[idx % difficultyColors.length]}
                  name={diffKey}
                />
              ))}
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      <div className="mt-4 p-3 bg-light">
        <p><strong>Total de Tareas:</strong> {stats.totalTasks}</p>
        <p><strong>Completadas:</strong> {stats.completed}</p>
        <p><strong>Pendientes:</strong> {stats.pending}</p>
        <p><strong>En Progreso:</strong> {stats.inProgress}</p>
      </div>
    </div>
  );
}

export default TaskMetricsPage;

----- frontend/src/pages/TaskMetricsPage/TaskMetricsPage.css -----
.profile-dashboard {
  background-color: #fff;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.charts-container {
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
  justify-content: center;
}

.chart-item {
  flex: 1;
  min-width: 300px;
  max-width: 600px;
  background-color: #f9f9f9;
  padding: 15px;
  border-radius: 12px;
  margin-bottom: 20px;
}

.chart-item h4 {
  text-align: center;
  margin-bottom: 10px;
}

.additional-stats {
  background: #f9f9f9;
  padding: 20px;
  border-radius: 12px;
}

----- frontend/src/pages/FriendsPage/FriendsPage.css -----
.friends-page-container {
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.friends-page-container h2 {
  text-align: center;
  margin-bottom: 30px;
  color: #333;
}

.search-form,
.search-results,
.pending-requests,
.accepted-friends {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
}

.friend-avatar {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  object-fit: cover;
  margin-right: 15px;
}

.friend-info {
  flex-grow: 1;
}

@media (max-width: 768px) {
  .friend-avatar {
    margin-right: 10px;
  }
}

----- frontend/src/pages/FriendsPage/FriendsPage.js -----
// frontend/src/pages/FriendsPage/FriendsPage.js
import React, { useState, useEffect } from 'react';
import authService from '../../services/authService';
import useSound from '../../hooks/useSound';
import { Alert, Button, Form, Card, Row, Col } from 'react-bootstrap';
import friendRequestSound from '../../assets/sounds/intro-sound-4-270301.mp3';
import acceptSound from '../../assets/sounds/level-up-191997.mp3';
import errorSound from '../../assets/sounds/ui-sound-off-270300.mp3';
import './FriendsPage.css';

function FriendsPage() {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [friends, setFriends] = useState([]);
  const [requests, setRequests] = useState([]);
  const [error, setError] = useState('');

  const playRequestSound = useSound(friendRequestSound);
  const playAcceptSound = useSound(acceptSound);
  const playErrorSound = useSound(errorSound);

  const user = authService.getCurrentUser();

  // Cargar lista de amigos
  const fetchFriends = async () => {
    try {
      const res = await fetch('/api/friends/list', {
        headers: {
          Authorization: `Bearer ${user?.token}`,
        },
      });
      if (res.ok) {
        const data = await res.json();
        setFriends(data);
      } else {
        playErrorSound();
        setError('Error al obtener amigos');
      }
    } catch (err) {
      playErrorSound();
      setError('Error al obtener amigos');
    }
  };

  // Cargar solicitudes
  const fetchRequests = async () => {
    try {
      const res = await fetch('/api/friends/requests', {
        headers: {
          Authorization: `Bearer ${user?.token}`,
        },
      });
      if (res.ok) {
        const data = await res.json();
        setRequests(data);
      } else {
        playErrorSound();
        setError('Error al obtener solicitudes');
      }
    } catch (err) {
      playErrorSound();
      setError('Error al obtener solicitudes');
    }
  };

  useEffect(() => {
    fetchFriends();
    fetchRequests();
    // eslint-disable-next-line
  }, []);

  // Buscar usuarios
  const handleSearch = async (e) => {
    e.preventDefault();
    setError('');
    try {
      const res = await fetch(`/api/friends/search?query=${searchQuery}`, {
        headers: { Authorization: `Bearer ${user?.token}` },
      });
      if (res.ok) {
        const data = await res.json();
        setSearchResults(data);
      } else {
        playErrorSound();
        setError('Error al buscar usuarios');
      }
    } catch (err) {
      playErrorSound();
      setError('Error al buscar usuarios');
    }
  };

  // Enviar solicitud
  const handleSendRequest = async (to_user_id) => {
    setError('');
    try {
      const res = await fetch('/api/friends/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${user?.token}`,
        },
        body: JSON.stringify({ to_user_id }),
      });
      if (res.ok) {
        playRequestSound();
        alert(`Solicitud de amistad enviada a user_id=${to_user_id}`);
      } else {
        const errorData = await res.json();
        playErrorSound();
        setError(errorData.error || 'Error al enviar solicitud');
      }
    } catch (err) {
      playErrorSound();
      setError('Error al enviar solicitud');
    }
  };

  // Aceptar
  const handleAccept = async (requestId) => {
    setError('');
    try {
      const res = await fetch(`/api/friends/${requestId}/accept`, {
        method: 'PUT',
        headers: { Authorization: `Bearer ${user?.token}` },
      });
      if (res.ok) {
        setRequests((prev) => prev.filter((r) => r.id !== requestId));
        fetchFriends();
        playAcceptSound();
      } else {
        playErrorSound();
        setError('Error al aceptar solicitud');
      }
    } catch (err) {
      playErrorSound();
      setError('Error al aceptar solicitud');
    }
  };

  // Rechazar
  const handleReject = async (requestId) => {
    setError('');
    try {
      const res = await fetch(`/api/friends/${requestId}/reject`, {
        method: 'PUT',
        headers: { Authorization: `Bearer ${user?.token}` },
      });
      if (res.ok) {
        setRequests((prev) => prev.filter((r) => r.id !== requestId));
      } else {
        playErrorSound();
        setError('Error al rechazar solicitud');
      }
    } catch (err) {
      playErrorSound();
      setError('Error al rechazar solicitud');
    }
  };

  // Fallback para foto
  const getPhotoOrDefault = (url) => {
    if (url && url.trim() !== '') {
      return url;
    }
    return '/default_silueta.jpeg';
  };

  return (
    <div className="friends-page-container">
      <h2>Amigos & Solicitudes</h2>
      {error && <Alert variant="danger">{error}</Alert>}

      {/* Búsqueda */}
      <div className="search-form mb-4">
        <Form onSubmit={handleSearch}>
          <Form.Group>
            <Form.Label>Buscar usuario por email o ID</Form.Label>
            <Form.Control
              type="text"
              placeholder="user@example.com o 123"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </Form.Group>
          <Button variant="primary" type="submit" className="mt-2">
            Buscar
          </Button>
        </Form>
      </div>

      {/* Resultados */}
      {searchResults.length > 0 && (
        <div className="search-results mb-4">
          <h4>Resultados de la búsqueda:</h4>
          <Row>
            {searchResults.map((u) => (
              <Col key={u.id} xs={12} md={6} lg={4} className="mb-3">
                <Card>
                  <Card.Body className="d-flex align-items-center">
                    <img
                      src={getPhotoOrDefault(u.profile_picture_url)}
                      alt="avatar"
                      className="friend-avatar"
                    />
                    <div className="friend-info">
                      <div>
                        <strong>ID:</strong> {u.id}
                      </div>
                      <div>
                        <strong>{u.name}</strong> <small>({u.email})</small>
                      </div>
                    </div>
                    <Button
                      variant="info"
                      size="sm"
                      onClick={() => handleSendRequest(u.id)}
                    >
                      Enviar Solicitud
                    </Button>
                  </Card.Body>
                </Card>
              </Col>
            ))}
          </Row>
        </div>
      )}

      {/* Solicitudes pendientes */}
      <div className="pending-requests mb-4">
        <h4>Solicitudes Recibidas</h4>
        {requests.length === 0 ? (
          <p>No tienes solicitudes pendientes.</p>
        ) : (
          <Row>
            {requests.map((req) => (
              <Col key={req.id} xs={12} md={6} lg={4} className="mb-3">
                <Card>
                  <Card.Body className="d-flex align-items-center">
                    <img
                      src={getPhotoOrDefault(req.from_photo)}
                      alt="avatar"
                      className="friend-avatar"
                    />
                    <div className="friend-info">
                      <div>
                        <strong>De:</strong> {req.from_name} (ID: {req.from_user_id})
                      </div>
                    </div>
                    <div className="ml-auto">
                      <Button
                        variant="success"
                        size="sm"
                        onClick={() => handleAccept(req.id)}
                        style={{ marginRight: '5px' }}
                      >
                        Aceptar
                      </Button>
                      <Button
                        variant="danger"
                        size="sm"
                        onClick={() => handleReject(req.id)}
                      >
                        Rechazar
                      </Button>
                    </div>
                  </Card.Body>
                </Card>
              </Col>
            ))}
          </Row>
        )}
      </div>

      {/* Amigos aceptados */}
      <div className="accepted-friends">
        <h4>Mis Amigos</h4>
        {friends.length === 0 ? (
          <p>Aún no tienes amigos aceptados.</p>
        ) : (
          <Row>
            {friends.map((f) => {
              const isFromMe = f.from_user_id === user?.id;
              const friendId = isFromMe ? f.to_user_id : f.from_user_id;
              const friendName = isFromMe ? f.to_name : f.from_name;
              const friendPhoto = isFromMe ? f.to_photo : f.from_photo;

              return (
                <Col key={f.id} xs={12} md={6} lg={4} className="mb-3">
                  <Card>
                    <Card.Body className="d-flex align-items-center">
                      <img
                        src={getPhotoOrDefault(friendPhoto)}
                        alt="avatar"
                        className="friend-avatar"
                      />
                      <div className="friend-info">
                        <div>
                          <strong>ID:</strong> {friendId}
                        </div>
                        <div>
                          <strong>{friendName}</strong> (status: {f.status})
                        </div>
                      </div>
                    </Card.Body>
                  </Card>
                </Col>
              );
            })}
          </Row>
        )}
      </div>
    </div>
  );
}

export default FriendsPage;

----- frontend/src/pages/ProfilePage/ProfilePage.css -----
/* frontend/src/pages/ProfilePage.css */

/* Layout principal */
.profile-layout {
    display: flex;
    gap: 40px;
    flex-wrap: wrap;
    justify-content: center;
    padding: 30px;
  }
  
  /* Sidebar donde va la foto y datos básicos */
  .profile-sidebar {
    width: 350px;
    background-color: #ffffff;
    padding: 35px;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    text-align: center;
    transition: transform 0.3s, box-shadow 0.3s;
  }
  
  .profile-sidebar:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 24px rgba(0, 0, 0, 0.15);
  }
  
  /* Contenedor de la imagen */
  .profile-picture-container {
    display: flex;
    justify-content: center;
    margin-bottom: 25px;
  }
  
  /* Imagen de perfil en círculo */
  .profile-picture {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    object-fit: cover; /* Se recorta bien la imagen */
    border: 4px solid var(--primary-color);
    cursor: pointer;
    transition: transform 0.3s, border-color 0.3s;
  }
  
  .profile-picture:hover {
    transform: scale(1.05);
    border-color: var(--secondary-color);
  }
  
  /* Si no hay foto, se podría usar un placeholder */
  .profile-placeholder {
    width: 150px;
    height: 150px;
    border-radius: 50%;
    background-color: var(--secondary-color);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s, transform 0.3s;
  }
  
  .profile-placeholder:hover {
    background-color: var(--primary-color);
    transform: scale(1.05);
  }
  
  /* Título y texto debajo de la imagen */
  .profile-sidebar h3 {
    margin-bottom: 15px;
    color: var(--text-color);
    font-size: 24px;
  }
  
  .profile-sidebar p {
    margin-bottom: 8px;
    color: var(--text-color);
    font-size: 16px;
  }
  
  /* Botón de "Editar Perfil" */
  .btn-info {
    background: linear-gradient(45deg, var(--info-color), var(--secondary-color));
    border: none;
    transition: background 0.3s;
  }
  
  .btn-info:hover {
    background: linear-gradient(45deg, #138496, var(--primary-color));
  }
  
  /* Sección "dashboard" si la usaras a la derecha */
  .profile-dashboard {
    flex: 2;
    min-width: 300px;
    background-color: #ffffff;
    padding: 35px;
    border-radius: 16px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s, box-shadow 0.3s;
  }
  
  .profile-dashboard:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 24px rgba(0, 0, 0, 0.15);
  }
  
  .profile-dashboard h2 {
    margin-bottom: 30px;
    color: var(--primary-color);
    text-align: center;
  }
  
  /* Contenedores para posibles gráficas o secciones */
  .charts-container {
    display: flex;
    flex-wrap: wrap;
    gap: 50px;
    justify-content: center;
  }
  
  .chart-item {
    flex: 1;
    min-width: 350px;
    background-color: #f9f9f9;
    padding: 25px;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }
  
  .additional-stats {
    margin-top: 40px;
    background-color: #f1f1f1;
    padding: 25px;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }
  
  .additional-stats p {
    font-size: 18px;
    margin: 12px 0;
    color: var(--text-color);
  }
  
  /* Ajustes responsivos */
  @media (max-width: 768px) {
    .charts-container {
      flex-direction: column;
      align-items: center;
    }
  }
  
----- frontend/src/pages/ProfilePage/ProfilePage.js -----
// frontend/src/pages/ProfilePage/ProfilePage.js

import React, { useState, useEffect } from 'react';
import './ProfilePage.css';
import EditProfileModal from '../../components/EditProfileModal/EditProfileModal';
import useSound from '../../hooks/useSound';
import editProfileSound from '../../assets/sounds/intro-sound-1-269293.mp3';
import { Alert } from 'react-bootstrap';
import authService from '../../services/authService';

function ProfilePage() {
  const [profile, setProfile] = useState({
    name: '',
    email: '',
    bio: '',
    profile_picture_url: '',
  });
  const [showEditModal, setShowEditModal] = useState(false);
  const [error, setError] = useState(null);

  const playEditProfileSound = useSound(editProfileSound);

  useEffect(() => {
    fetchProfile();
    // eslint-disable-next-line
  }, []);

  const fetchProfile = async () => {
    try {
      const user = authService.getCurrentUser();
      if (!user || !user.token) {
        setError('No hay usuario logueado.');
        return;
      }

      const response = await fetch('/api/profile', {
        headers: { Authorization: `Bearer ${user.token}` },
      });

      if (!response.ok) {
        throw new Error('Error al obtener el perfil');
      }

      const data = await response.json();
      setProfile(data);
      setError(null); // limpiar error si todo va bien
    } catch (err) {
      console.error('Error al obtener el perfil:', err);
      setError('Error al obtener el perfil');
    }
  };

  // Al guardar en EditProfileModal, se actualiza el estado local
  const handleSaveProfile = (updatedProfile) => {
    setProfile(updatedProfile);
    playEditProfileSound();
    // Si deseas reconfirmar con DB:
    // fetchProfile();
  };

  // Si no hay URL => fallback a default
  const displayImage = profile.profile_picture_url?.trim()
    ? profile.profile_picture_url
    : '/default_silueta.jpeg';

  return (
    <div className="profile-layout">
      <aside className="profile-sidebar">
        <div className="profile-picture-container">
          <img
            src={displayImage}
            alt="Profile"
            className="profile-picture"
            onClick={() => setShowEditModal(true)}
            title="Editar Perfil"
          />
        </div>
        <h3>{profile.name}</h3>
        <p>{profile.bio}</p>
        <p>{profile.email}</p>

        <button
          className="btn btn-info mt-3"
          onClick={() => setShowEditModal(true)}
        >
          Editar Perfil
        </button>
      </aside>

      <div className="profile-content">
        {error && <Alert variant="danger">{error}</Alert>}
        {/* Aquí podrías mostrar más info (tareas, etc.) */}
      </div>

      {/* Modal para editar */}
      <EditProfileModal
        show={showEditModal}
        handleClose={() => setShowEditModal(false)}
        profile={profile}
        handleSave={handleSaveProfile}
      />
    </div>
  );
}

export default ProfilePage;

----- frontend/src/services/authService.js -----
// frontend/src/services/authService.js

import axios from 'axios';
import { jwtDecode } from 'jwt-decode'; // Importación corregida

const API_URL = '/api/auth/';

const register = async (userData) => {
  try {
    const response = await axios.post(`${API_URL}register`, userData);
    if (response.data.token) {
      const decoded = jwtDecode(response.data.token); // Uso corregido
      const user = {
        token: response.data.token,
        id: decoded.user.id,
        role: decoded.user.role,
      };
      localStorage.setItem('user', JSON.stringify(user));
      return user;
    }
    return null;
  } catch (error) {
    console.error('Error en el registro:', error.response?.data || error.message);
    throw error;
  }
};

const login = async (credentials) => {
  try {
    const response = await axios.post(`${API_URL}login`, credentials);
    if (response.data.token) {
      const decoded = jwtDecode(response.data.token); // Uso corregido
      const user = {
        token: response.data.token,
        id: decoded.user.id,
        role: decoded.user.role,
      };
      localStorage.setItem('user', JSON.stringify(user));
      return user;
    }
    return null;
  } catch (error) {
    console.error('Error en el login:', error.response?.data || error.message);
    throw error;
  }
};

const logout = () => {
  localStorage.removeItem('user');
};

const getCurrentUser = () => {
  const userStr = localStorage.getItem('user');
  if (!userStr) return null;
  try {
    const user = JSON.parse(userStr);
    return user;
  } catch (error) {
    console.error('Error al parsear el usuario de localStorage:', error);
    return null;
  }
};

const authService = {
  register,
  login,
  logout,
  getCurrentUser,
};

export default authService;
